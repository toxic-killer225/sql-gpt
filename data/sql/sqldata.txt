select l_returnflag,l_linestatus,sum(l_quantity) as sum_qty,sum(l_extendedprice) as sum_base_price,sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,avg(l_quantity) as avg_qty,avg(l_extendedprice) as avg_price,avg(l_discount) as avg_disc,count(*) as count_order from lineitem where l_shipdate <= date '1998-12-01' - interval '80' day (3) group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
select s_acctbal,s_name,n_name,p_partkey,p_mfgr,s_address,s_phone,s_comment from part,supplier,partsupp,nation,region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 41 and p_type like '%COPPER' and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'AMERICA' and ps_supplycost = ( select min(ps_supplycost) from partsupp,supplier,nation,region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'AMERICA') order by s_acctbal desc, n_name, s_name, p_partkey;
select l_orderkey,sum(l_extendedprice * (1 - l_discount)) as revenue,o_orderdate,o_shippriority from customer, orders,lineitem where c_mktsegment = 'HOUSEHOLD' and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate < date '1995-03-07' and l_shipdate > date '1995-03-07' group by l_orderkey,o_orderdate,o_shippriority order by revenue desc, o_orderdate;
select o_orderpriority,count(*) as order_count from  orders where o_orderdate >= date '1993-12-01' and o_orderdate < date '1993-12-01' + interval '3' month and exists ( select *from  lineitem where l_orderkey = o_orderkey and l_commitdate < l_receiptdate ) group by o_orderpriority order by o_orderpriority;
select n_name,sum(l_extendedprice * (1 - l_discount)) as revenue from customer,orders,lineitem,supplier,nation,region where c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'MIDDLE EAST' and o_orderdate >= date '1994-01-01' and o_orderdate < date '1994-01-01' + interval '1' year group by n_name order by revenue desc;
select sum(l_extendedprice * l_discount) as revenue from lineitem where l_shipdate >= date '1994-01-01' and l_shipdate < date '1994-01-01' + interval '1' year and l_discount between 0.05 - 0.01 and 0.05 + 0.01 and l_quantity < 24;
select supp_nation,cust_nation,l_year,sum(volume) as revenue from ( select  n1.n_name as supp_nation,  n2.n_name as cust_nation,  extract(year from l_shipdate) as l_year,  l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey  and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and (  (n1.n_name = 'INDONESIA' and n2.n_name = 'IRAQ')  or (n1.n_name = 'IRAQ' and n2.n_name = 'INDONESIA')  ) and l_shipdate between date '1995-01-01' and date '1996-12-31'  ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year;
select  o_year, sum(case  when nation = 'INDONESIA' then volume  else 0end) / sum(volume) as mkt_share from(   select  extract(year from o_orderdate) as o_year,l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from  part,  supplier,  lineitem,  orders,  customer,  nation n1,  nation n2,  region where  p_partkey = l_partkey  and s_suppkey = l_suppkey  and l_orderkey = o_orderkey  and o_custkey = c_custkey  and c_nationkey = n1.n_nationkey  and n1.n_regionkey = r_regionkey  and r_name = 'ASIA'  and s_nationkey = n2.n_nationkey  and o_orderdate between date '1995-01-01' and date '1996-12-31'  and p_type = 'MEDIUM BRUSHED TIN' ) as all_nations group by o_year order by   o_year;
select  nation, o_year sum(amount) as sum_profit from  ( select  n_name as nation,extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from  part,  supplier,  lineitem,   partsupp,   orders, nation where  s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like '%lemon%') as profit group by nation, o_year order by nation, o_year desc;
select c_custkey,c_name,sum(l_extendedprice * (1 - l_discount)) as revenue,c_acctbal,n_name,c_address,c_phone,c_comment from customer, orders,lineitem,nation where c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate >= date '1995-01-01' and o_orderdate < date '1995-01-01' + interval '3' month and l_returnflag = 'R' and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal,c_phone,n_name,c_address,c_comment order by revenue desc;
select ps_partkey, sum(ps_supplycost * ps_availqty) as value from  partsupp, supplier, nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'ARGENTINA' group by ps_partkey having sum(ps_supplycost * ps_availqty) > (select sum(ps_supplycost * ps_availqty) * 0.0001000000 from partsupp, supplier, nation where  ps_suppkey = s_suppkey  and s_nationkey = n_nationkey and n_name = 'ARGENTINA' )order by value desc;
select  l_shipmode, sum(case  when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1 else 0 end) as high_line_count,sum(case when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1 else 0 end) as low_line_count from orders,lineitem where o_orderkey = l_orderkey and l_shipmode in ('REG AIR', 'RAIL') and l_commitdate < l_receiptdate and l_shipdate < l_commitdate and l_receiptdate >= date '1995-01-01' and l_receiptdate < date '1995-01-01' + interval '1' year group by    l_shipmode order by  l_shipmode;
select  c_count  count(*) as custdist from   (select   c_custkey,   count(o_orderkey)from customer left outer join orders on c_custkey = o_custkey and o_comment not like '%pending%accounts%' group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc;
select 100.00 * sum(case  when p_type like 'PROMO%'  then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_partkey = p_partkey and l_shipdate >= date '1995-07-01' and l_shipdate < date '1995-07-01' + interval '1' month;
create view revenue0 (supplier_no, total_revenue) as   select   l_suppkey, sum(l_extendedprice * (1 - l_discount)) from lineitem where  l_shipdate >= date '1996-01-01' and l_shipdate < date '1996-01-01' + interval '3' month group by  l_suppkey;
select  s_suppkey, s_name, s_address, s_phone, total_revenue from supplier, revenue0 where s_suppkey = supplier_no and total_revenue = ( select  max(total_revenue)  from revenue0 ) order by s_suppkey; 
select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where p_partkey = ps_partkey and p_brand <> 'Brand#34' and p_type not like 'LARGE POLISHED%' and p_size in (34, 4, 24, 47, 11, 25, 8, 40) and ps_suppkey not in ( select  s_suppkey  from  supplier  where  s_comment like '%Customer%Complaints%' )group by p_brand,  p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size;
select sum(l_extendedprice) / 7.0 as avg_yearly from  lineitem,  part where  p_partkey = l_partkey  and p_brand = 'Brand#44'  and p_container = 'JUMBO BAG'  and l_quantity < (  select   0.2 * avg(l_quantity)  from  lineitem where  l_partkey = p_partkey );
select  c_name,  c_custkey,  o_orderkey,  o_orderdate,  o_totalprice,  sum(l_quantity) from customer, orders, lineitem where o_orderkey in ( select l_orderkey from  lineitem group by  l_orderkey having  sum(l_quantity) > 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate;
select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where ( p_partkey = l_partkey and p_brand = 'Brand#41' and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG') and l_quantity >= 1 and l_quantity <= 1 + 10 and p_size between 1 and 5 and l_shipmode in ('AIR', 'AIR REG') and l_shipinstruct = 'DELIVER IN PERSON' ) or ( p_partkey = l_partkey and p_brand = 'Brand#35' and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK') and l_quantity >= 18 and l_quantity <= 18 + 10 and p_size between 1 and 10 and l_shipmode in ('AIR', 'AIR REG') and l_shipinstruct = 'DELIVER IN PERSON'  )  or  (  p_partkey = l_partkey  and p_brand = 'Brand#13'  and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')  and l_quantity >= 23 and l_quantity <= 23 + 10  and p_size between 1 and 15  and l_shipmode in ('AIR', 'AIR REG')  and l_shipinstruct = 'DELIVER IN PERSON');
select s_name, s_address from supplier, nation where  s_suppkey in ( select   ps_suppkey from   partsupp  where  ps_partkey in (   select  p_partkey from  part  where  p_name like 'bisque%' ) and ps_availqty > (   select   0.5 * sum(l_quantity) from  lineitem  where  l_partkey = ps_partkey  and l_suppkey = ps_suppkey  and l_shipdate >= date '1995-01-01' and l_shipdate < date '1995-01-01' + interval '1' year ) ) and s_nationkey = n_nationkey and n_name = 'UNITED KINGDOM' order by  s_name;
select s_name, count(*) as numwait from  supplier,  lineitem l1,  orders,  nation where  s_suppkey = l1.l_suppkey  and o_orderkey = l1.l_orderkey  and o_orderstatus = 'F'  and l1.l_receiptdate > l1.l_commitdate  and exists ( select   * from    lineitem l2  where   l2.l_orderkey = l1.l_orderkey  and l2.l_suppkey <> l1.l_suppkey  )  and not exists (   select  *  from   lineitem l3 where    l3.l_orderkey = l1.l_orderkey  and l3.l_suppkey <> l1.l_suppkey and l3.l_receiptdate > l3.l_commitdate  )  and s_nationkey = n_nationkey and n_name = 'IRAQ' group by  s_name order by numwait desc,  s_name;
select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from (  select   substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where substring(c_phone from 1 for 2) in   ('33', '14', '22', '13', '30', '20', '29')  and c_acctbal > ( select  avg(c_acctbal)   from   customer  where  c_acctbal > 0.00  and substring(c_phone from 1 for 2) in   ('33', '14', '22', '13', '30', '20', '29')  )  and not exists (  select   *  from  orders  where  o_custkey = c_custkey )  ) as custsale group by cntrycode order by  cntrycode;
SELECT * FROM Customers;
UPDATE Products SET price = 20 WHERE id = 1;
DELETE FROM Orders WHERE customer_id = 10;
INSERT INTO Employees (name, age, salary) VALUES ('John Doe', 30, 50000);
SELECT COUNT(*) FROM Customers WHERE country = 'USA';
SELECT * FROM Orders WHERE date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT name, price FROM Products ORDER BY price DESC;
UPDATE Customers SET email = 'newemail@example.com' WHERE id = 5;
DELETE FROM Products WHERE id = 10;
INSERT INTO Orders (customer_id, product_id, date) VALUES (7, 15, '2022-08-15');
SELECT MAX(price) FROM Products;
SELECT * FROM Customers WHERE name LIKE 'J%';
UPDATE Employees SET salary = salary * 1.1 WHERE age > 40;
DELETE FROM Customers WHERE country = 'Canada';
INSERT INTO Products (name, price, description) VALUES ('Widget', 10, 'A handy widget.');
SELECT AVG(price) FROM Products WHERE category = 'Electronics';
SELECT * FROM Orders WHERE product_id IN (10, 15, 20);
UPDATE Customers SET phone = '123-456-7890' WHERE name = 'Jane Doe';
DELETE FROM Orders WHERE date < '2022-01-01';
INSERT INTO Customers (name, email, phone) VALUES ('Bob Smith', 'bob@example.com', '555-1234');
SELECT MIN(price) FROM Products WHERE category = 'Books';
SELECT * FROM Customers WHERE email LIKE '%@example.com';
UPDATE Employees SET salary = salary + 5000 WHERE id = 10;
DELETE FROM Products WHERE category = 'Toys';
INSERT INTO Orders (customer_id, product_id, date) VALUES (3, 5, '2022-05-01');
SELECT SUM(price) FROM Products WHERE category = 'Clothing';
SELECT * FROM Orders WHERE customer_id = 8 AND date > '2022-06-30';
UPDATE Customers SET name = 'Jane Smith' WHERE id = 10;
DELETE FROM Employees WHERE age < 25;
INSERT INTO Products (name, price, description) VALUES ('Gizmo', 15, 'A nifty gizmo.');
SELECT COUNT(DISTINCT country) FROM Customers;
SELECT * FROM Orders WHERE date > '2022-01-01' AND date < '2022-12-31';
SELECT name, price FROM Products WHERE price BETWEEN 10 AND 20;
UPDATE Employees SET age = age + 1 WHERE salary > 60000;
DELETE FROM Orders WHERE product_id = 25;
INSERT INTO Customers (name, email, phone) VALUES ('Sally Johnson', 'sally@example.com', '555-4321');
SELECT AVG(price) FROM Products WHERE category = 'Toys';
SELECT * FROM Orders WHERE customer_id IN (3, 5, 7);
UPDATE Customers SET country = 'Mexico' WHERE name = 'Juan Perez';
DELETE FROM Products WHERE price < 5;
INSERT INTO Orders (customer_id, product_id, date) VALUES (10, 2, '2022-09-15');
SELECT MAX(price) FROM Products WHERE category = 'Electronics';
SELECT * FROM Customers WHERE phone;
SELECT * FROM employees;
SELECT first_name, last_name, salary FROM employees;
SELECT COUNT(*) FROM employees;
SELECT AVG(salary) FROM employees;
SELECT MAX(salary) FROM employees;
SELECT MIN(salary) FROM employees;
SELECT DISTINCT department_name FROM employees;
SELECT * FROM employees WHERE department_name = 'IT';
SELECT * FROM employees WHERE salary > 50000;
SELECT * FROM employees WHERE hire_date BETWEEN '01-JAN-2010' AND '31-DEC-2015';
SELECT * FROM employees ORDER BY last_name ASC;
SELECT * FROM employees ORDER BY salary DESC;
SELECT * FROM employees WHERE employee_id = 100;
SELECT first_name, last_name, salary FROM employees WHERE department_id = 10;
SELECT first_name, last_name, salary FROM employees WHERE salary > 50000 AND department_id = 20;
SELECT * FROM employees WHERE last_name LIKE 'S%';
SELECT * FROM employees WHERE first_name IN ('John', 'Jane', 'Mike');
SELECT * FROM employees WHERE employee_id NOT IN (100, 200, 300);
SELECT first_name, last_name, salary FROM employees WHERE salary BETWEEN 30000 AND 50000;
SELECT * FROM employees WHERE job_id LIKE '%MAN%';
SELECT first_name, last_name, email FROM customers;
SELECT COUNT(*) FROM orders;
SELECT AVG(price) FROM products;
SELECT MAX(stock) FROM products;
SELECT MIN(price) FROM products;
SELECT DISTINCT category FROM products;
SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM products;
SELECT * FROM categories;
SELECT * FROM employees;
SELECT * FROM suppliers;
SELECT * FROM shippers;
SELECT COUNT(*) FROM customers;
SELECT AVG(price) FROM products;
SELECT MIN(price) FROM products;
SELECT MAX(price) FROM products;
SELECT DISTINCT country FROM customers;
SELECT * FROM customers WHERE country = 'USA';
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE category_id = 2;
SELECT * FROM products WHERE price > 50;
SELECT * FROM employees WHERE title = 'Sales Manager';
SELECT * FROM suppliers WHERE supplier_name LIKE '%Corp%';
SELECT * FROM customers ORDER BY customer_name ASC;
SELECT * FROM orders ORDER BY order_date DESC;
SELECT * FROM orders WHERE customer_id = 1 ORDER BY order_date DESC;
SELECT * FROM products WHERE category_id = 1 ORDER BY price ASC;
SELECT * FROM employees WHERE title = 'Sales Manager' AND city = 'New York';
SELECT * FROM customers WHERE city IN ('New York', 'Los Angeles');
SELECT * FROM customers WHERE customer_id BETWEEN 1 AND 100;
SELECT * FROM orders WHERE order_id NOT IN (100, 200, 300);
SELECT * FROM products WHERE price BETWEEN 10 AND 20;
SELECT * FROM products WHERE product_name LIKE '%Apple%';
SELECT COUNT(*) FROM customers WHERE country = 'USA';
SELECT AVG(price) FROM products WHERE category_id = 2;
SELECT MIN(price) FROM products WHERE category_id = 1;
SELECT MAX(price) FROM products WHERE category_id = 3;
SELECT DISTINCT city FROM customers WHERE country = 'USA';
SELECT * FROM customers WHERE country = 'USA' AND state = 'CA';
SELECT * FROM orders WHERE order_date > '2022-01-01';
SELECT * FROM orders WHERE order_date < '2022-01-01';
SELECT * FROM products WHERE price > 50 AND category_id = 2;
SELECT * FROM employees WHERE title = 'Sales Manager' OR title = 'Sales Representative';
SELECT * FROM customers WHERE customer_name LIKE '%Corp%' OR city = 'Los Angeles';
SELECT * FROM customers WHERE customer_id > 100 ORDER BY customer_name ASC;
SELECT * FROM orders WHERE customer_id = 1 ORDER BY order_date DESC LIMIT 10;
SELECT * FROM products WHERE category_id = 1 ORDER BY price DESC LIMIT 5;
SELECT * FROM employees WHERE city = 'New York' AND title = 'Sales Manager' OR title = 'Sales Representative';
SELECT * FROM customers WHERE city NOT IN ('New York', 'Los Angeles');
SELECT * FROM orders WHERE order_id BETWEEN 100 AND 200;
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31' AND customer_id = 1;
SELECT COUNT(*) FROM products WHERE price > 50 AND category_id = 2;
SELECT AVG(price) FROM products WHERE category_id = 1 OR category_id = 2;
SELECT MIN(price) FROM products WHERE category_id = 3 OR category_id = 4;
SELECT * FROM table_name;
SELECT column1, column2 FROM table_name;
SELECT COUNT(*) FROM table_name;
SELECT AVG(column1) FROM table_name;
SELECT MAX(column1) FROM table_name;
SELECT MIN(column1) FROM table_name;
SELECT DISTINCT column1 FROM table_name;
SELECT * FROM table_name WHERE column1 = 'value';
SELECT * FROM table_name WHERE column1 > 100;
SELECT * FROM table_name WHERE column1 < 100;
SELECT * FROM table_name WHERE column1 BETWEEN 100 AND 200;
SELECT * FROM customers;
SELECT first_name, last_name, email FROM customers;
SELECT COUNT(*) FROM orders;
SELECT AVG(price) FROM products;
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products;
SELECT DISTINCT category FROM products;
SELECT * FROM products WHERE category = 'Electronics';
SELECT * FROM products WHERE price > 500;
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM customers ORDER BY last_name ASC;
SELECT * FROM products ORDER BY price DESC;
SELECT * FROM customers WHERE customer_id = 100;
SELECT first_name, last_name, email FROM customers WHERE city = 'New York';
SELECT first_name, last_name, email FROM customers WHERE state = 'CA' AND zip_code = '90001';
SELECT * FROM customers WHERE email LIKE '%gmail.com';
SELECT * FROM orders WHERE order_status = 'shipped';
SELECT * FROM orders WHERE total_price > 1000;
SELECT * FROM products WHERE category IN ('Electronics', 'Clothing');
SELECT * FROM products WHERE product_id NOT IN (100, 200, 300);
SELECT first_name, last_name, email FROM customers WHERE created_at BETWEEN '2021-01-01' AND '2021-12-31';
SELECT * FROM orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-12-31';
SELECT * FROM customers WHERE first_name = 'John' OR last_name = 'Doe';
SELECT * FROM orders WHERE customer_id = 500 AND order_status = 'pending';
SELECT * FROM products WHERE price BETWEEN 50 AND 100;
SELECT * FROM orders WHERE order_date > DATE_SUB(NOW(), INTERVAL 7 DAY);
SELECT * FROM customers WHERE email REGEXP '^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,}$';
SELECT * FROM products WHERE product_name LIKE '%iPhone%';
SELECT * FROM orders WHERE total_price > (SELECT AVG(total_price) FROM orders);
SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE total_price > 500);
SELECT category, COUNT(*) AS count FROM products GROUP BY category;
SELECT category, AVG(price) AS avg_price FROM products GROUP BY category;
SELECT customer_id, COUNT() AS count FROM orders GROUP BY customer_id HAVING COUNT() >= 3;
SELECT customer_id, SUM(total_price) AS total_spent FROM orders GROUP BY customer_id ORDER BY total_spent DESC LIMIT 10;
SELECT category, SUM(quantity) AS total_sold FROM order_items INNER JOIN products ON order_items.product_id = products.product_id GROUP BY category;
SELECT customer_id, COUNT(*) AS count FROM orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-12-31' GROUP BY customer_id;
SELECT category, AVG(price) AS avg_price, MAX(price) AS max_price, MIN(price) AS min_price FROM products GROUP BY category;
SELECT * FROM orders WHERE order_date = (SELECT MAX(order_date) FROM orders);
SELECT * FROM orders WHERE order_date = (SELECT MIN(order_date) FROM orders);
SELECT * FROM customers;
SELECT customer_name, city FROM customers;
SELECT COUNT(*) FROM customers;
SELECT AVG(order_amount) FROM orders;
SELECT MAX(order_amount) FROM orders;
SELECT MIN(order_amount) FROM orders;
SELECT DISTINCT country FROM customers;
SELECT * FROM orders WHERE customer_id = 1;
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM orders WHERE order_amount > 1000;
SELECT * FROM orders WHERE order_date > '2022-01-01' ORDER BY order_date ASC;
SELECT * FROM orders WHERE order_date < '2022-01-01' ORDER BY order_date DESC;
SELECT * FROM products WHERE product_name = 'iPhone';
SELECT * FROM products WHERE unit_price > 1000;
SELECT * FROM products WHERE category_id = 1;
SELECT * FROM products WHERE supplier_id = 1;
SELECT * FROM suppliers WHERE supplier_name LIKE '%corp%';
SELECT * FROM categories WHERE category_name IN ('Electronics', 'Books', 'Clothing');
SELECT * FROM orders WHERE order_id NOT IN (1, 2, 3);
SELECT * FROM customers WHERE customer_id BETWEEN 1 AND 100;
SELECT * FROM customers WHERE customer_id NOT BETWEEN 1 AND 100;
SELECT * FROM customers WHERE city = 'New York' AND state = 'NY';
SELECT * FROM orders WHERE order_date LIKE '2022-05%';
SELECT * FROM orders WHERE order_amount > 500 AND order_amount < 1000;
SELECT * FROM products WHERE unit_price BETWEEN 100 AND 500;
SELECT * FROM orders WHERE order_status = 'Shipped' ORDER BY shipped_date DESC;
SELECT customer_name, SUM(order_amount) FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id;
SELECT supplier_name, COUNT(*) FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id GROUP BY suppliers.supplier_id;
SELECT * FROM orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE country = 'USA');
SELECT * FROM products WHERE supplier_id IN (SELECT supplier_id FROM suppliers WHERE country = 'USA');
SELECT * FROM orders WHERE order_amount > (SELECT AVG(order_amount) FROM orders);
SELECT * FROM orders WHERE order_amount = (SELECT MAX(order_amount) FROM orders);
SELECT * FROM orders WHERE order_date = (SELECT MIN(order_date) FROM orders);
SELECT customer_name, order_amount, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.city = 'New York' AND orders.order_status = 'Shipped' ORDER BY orders.order_date DESC;
SELECT * FROM orders WHERE order_status IN ('Shipped', 'Cancelled');
SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);
SELECT * FROM customers WHERE customer_id = ANY (SELECT customer_id FROM orders WHERE order_amount > 1000);
SELECT * FROM orders WHERE order_date BETWEEN (SELECT MIN(order_date) FROM orders) AND (SELECT MAX(order_date) FROM orders);
SELECT * FROM products WHERE unit_price > (SELECT AVG(unit_price) FROM products);
SELECT * FROM customers;
SELECT first_name, last_name FROM customers;
SELECT COUNT(*) FROM customers;
SELECT AVG(age) FROM customers;
SELECT MAX(age) FROM customers;
SELECT MIN(age) FROM customers;
SELECT DISTINCT city FROM customers;
SELECT * FROM customers WHERE city = 'New York';
SELECT * FROM customers WHERE age > 30;
SELECT * FROM customers WHERE birthday BETWEEN '1990-01-01' AND '1999-12-31';
SELECT * FROM customers ORDER BY last_name ASC;
SELECT * FROM customers ORDER BY age DESC;
SELECT * FROM customers WHERE customer_id = 100;
SELECT first_name, last_name, age FROM customers WHERE city = 'Los Angeles';
SELECT first_name, last_name, age FROM customers WHERE age > 30 AND city = 'Chicago';
SELECT * FROM customers WHERE last_name LIKE 'S%';
SELECT * FROM customers WHERE first_name IN ('John', 'Jane', 'Mike');
SELECT * FROM customers WHERE customer_id NOT IN (100, 200, 300);
SELECT first_name, last_name, age FROM customers WHERE age BETWEEN 25 AND 40;
SELECT * FROM customers WHERE email LIKE '%gmail.com';
SELECT * FROM orders;
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM orders WHERE customer_id = 100;
SELECT * FROM orders WHERE total_price > 1000;
SELECT * FROM orders ORDER BY order_date ASC;
SELECT * FROM orders ORDER BY total_price DESC;
SELECT COUNT(*) FROM orders;
SELECT AVG(total_price) FROM orders;
SELECT MAX(total_price) FROM orders;
SELECT MIN(total_price) FROM orders;
SELECT DISTINCT product_name FROM orders;
SELECT * FROM orders WHERE product_name = 'iPhone 12';
SELECT * FROM orders WHERE order_status = 'shipped';
SELECT * FROM orders WHERE shipping_address LIKE '%Los Angeles%';
SELECT * FROM orders WHERE total_price BETWEEN 500 AND 1000;
SELECT * FROM orders WHERE order_date < '2022-06-30';
SELECT * FROM orders WHERE order_date > '2022-06-30' AND order_status = 'shipped';
SELECT * FROM orders WHERE order_date > '2022-06-30' AND order_status = 'cancelled';
SELECT * FROM orders WHERE order_date > '2022-06-30' AND order_status = 'pending';
SELECT * FROM products;
SELECT * FROM products WHERE price BETWEEN 100 AND 500;
SELECT * FROM products WHERE product_id = 100;
SELECT * FROM products WHERE category = 'Electronics';
SELECT * FROM products WHERE supplier_id = 10;
SELECT * FROM products WHERE product_name LIKE '%Apple%';
SELECT COUNT(*) FROM products;
SELECT AVG(price) FROM products;
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products;
SELECT DISTINCT supplier_name FROM products;
SELECT * FROM suppliers;
SELECT * FROM suppliers WHERE supplier_id = 20;
SELECT * FROM suppliers WHERE supplier_name LIKE '%Corp%';
SELECT * FROM suppliers WHERE city = 'Los Angeles';
SELECT COUNT(*) FROM suppliers;
SELECT * FROM customers;
SELECT customer_name, city, country FROM customers;
SELECT COUNT(*) FROM customers;
SELECT AVG(order_total) FROM orders;
SELECT MAX(order_total) FROM orders;
SELECT MIN(order_total) FROM orders;
SELECT DISTINCT product_category FROM products;
SELECT * FROM customers WHERE city = 'New York';
SELECT * FROM orders WHERE order_total > 1000;
SELECT * FROM orders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31';
SELECT * FROM customers ORDER BY customer_name ASC;
SELECT * FROM orders ORDER BY order_total DESC;
SELECT * FROM customers WHERE customer_id = 100;
SELECT customer_name, city, country FROM customers WHERE country = 'USA';
SELECT customer_name, city, country FROM customers WHERE country <> 'USA';
SELECT * FROM orders WHERE order_status LIKE 'Shipped%';
SELECT * FROM products WHERE product_name IN ('Apple', 'Banana', 'Orange');
SELECT * FROM products WHERE product_price NOT BETWEEN 10 AND 50;
SELECT customer_name, order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id;
SELECT customer_name, order_total FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;
SELECT customer_name, order_total FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;
SELECT customer_name, order_total FROM customers FULL OUTER JOIN orders ON customers.customer_id = orders.customer_id;
SELECT * FROM customers WHERE customer_name LIKE '%John%';
SELECT * FROM orders WHERE order_total > (SELECT AVG(order_total) FROM orders);
SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);
SELECT customer_name, COUNT(*) FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;
SELECT product_category, SUM(product_sales) FROM products GROUP BY product_category;
SELECT customer_name, MAX(order_total) FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;
SELECT product_name, product_price FROM products WHERE product_price = (SELECT MAX(product_price) FROM products);
SELECT * FROM customers WHERE customer_id = ANY (SELECT customer_id FROM orders WHERE order_total > 500);
SELECT * FROM customers WHERE customer_id = ALL (SELECT customer_id FROM orders WHERE order_total > 500);
SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31');
SELECT customer_name, COUNT(*) FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.customer_id = orders.customer_id) GROUP BY customer_name;
SELECT customer_name, COUNT(*) FROM customers WHERE NOT EXISTS (SELECT * FROM orders WHERE customers.customer_id = orders.customer_id) GROUP BY customer_name;
SELECT * FROM products WHERE product_name LIKE '%fruit%' AND product_price < 5;
SELECT customer_name, order_total FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customers.customer_id = orders.customer_id AND order_total > 1000);
SELECT customer_name, order_total FROM customers WHERE NOT EXISTS (SELECT * FROM orders WHERE customers.customer_id = orders.customer_id AND order_status = 'Shipped');
SELECT * FROM employees;
SELECT first_name, last_name, salary FROM employees;
SELECT COUNT(*) FROM employees;
SELECT AVG(salary) FROM employees;
SELECT MAX(salary) FROM employees;
SELECT MIN(salary) FROM employees;
SELECT DISTINCT department_name FROM employees;
SELECT * FROM employees WHERE department_name = 'IT';
SELECT * FROM employees WHERE salary > 50000;
SELECT * FROM employees WHERE hire_date BETWEEN '01-JAN-2010' AND '31-DEC-2015';
SELECT * FROM employees ORDER BY last_name ASC;
SELECT * FROM employees ORDER BY salary DESC;
SELECT * FROM employees WHERE employee_id = 100;
SELECT first_name, last_name, salary FROM employees WHERE department_id = 10;
SELECT first_name, last_name, salary FROM employees WHERE salary > 50000 AND department_id = 20;
SELECT * FROM employees WHERE last_name LIKE 'S%';
SELECT * FROM employees WHERE first_name IN ('John', 'Jane', 'Mike');
SELECT * FROM employees WHERE employee_id NOT IN (100, 200, 300);
SELECT first_name, last_name, salary FROM employees WHERE salary BETWEEN 30000 AND 50000;
SELECT * FROM employees WHERE job_id LIKE '%MAN%';
SELECT * FROM orders WHERE order_date BETWEEN '01-JAN-2022' AND '31-DEC-2022';
SELECT * FROM orders WHERE order_status = 'shipped';
SELECT customer_name, SUM(order_total) FROM orders GROUP BY customer_name;
SELECT product_name, AVG(price) FROM products GROUP BY product_name;
SELECT COUNT(*) FROM customers WHERE city = 'New York';
SELECT * FROM products WHERE price BETWEEN 50 AND 100;
SELECT * FROM orders WHERE customer_id = 100;
SELECT customer_name, order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id;
SELECT product_name, price FROM products WHERE category_id IN (1, 2, 3);
SELECT COUNT(*) FROM orders WHERE order_total > 1000;
SELECT customer_name, order_total FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;
SELECT product_name, price FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT * FROM orders WHERE order_total = (SELECT MAX(order_total) FROM orders);
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
SELECT customer_name, order_total FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;
SELECT product_name, price FROM products WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');
SELECT COUNT(*) FROM orders WHERE order_date LIKE '%2022%';
SELECT customer_name, SUM(order_total) FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '01-JAN-2022' AND '31-DEC-2022' GROUP BY customer_name;
SELECT * FROM products WHERE product_name LIKE '%phone%' AND price > 500;
SELECT * FROM table_name;
SELECT column1, column2 FROM table_name;
SELECT COUNT(*) FROM table_name;
SELECT AVG(column1) FROM table_name;
SELECT MAX(column1) FROM table_name;
SELECT MIN(column1) FROM table_name;
SELECT DISTINCT column1 FROM table_name;
SELECT * FROM table_name WHERE column1 = 'value';
SELECT * FROM table_name WHERE column1 > 10;
SELECT * FROM table_name WHERE column1 BETWEEN 10 AND 20;
SELECT * FROM table_name ORDER BY column1 ASC;
SELECT * FROM table_name ORDER BY column1 DESC;
SELECT * FROM table_name WHERE id = 1;
SELECT column1, column2 FROM table_name WHERE column1 = 'value';
SELECT column1, column2 FROM table_name WHERE column1 > 10 AND column2 = 'value';
SELECT * FROM table_name WHERE column1 LIKE '%value%';
SELECT * FROM table_name WHERE column1 IN ('value1', 'value2', 'value3');
SELECT * FROM table_name WHERE column1 NOT IN ('value1', 'value2', 'value3');
SELECT column1, column2 FROM table_name WHERE column1 BETWEEN 10 AND 20 AND column2 = 'value';
SELECT * FROM table_name WHERE column1 = 'value' OR column2 = 'value';
SELECT * FROM table_name WHERE column1 = 'value' AND column2 = 'value';
SELECT column1, COUNT(*) FROM table_name GROUP BY column1;
SELECT column1, AVG(column2) FROM table_name GROUP BY column1;
SELECT column1, MAX(column2) FROM table_name GROUP BY column1;
SELECT column1, MIN(column2) FROM table_name GROUP BY column1;
SELECT column1, SUM(column2) FROM table_name GROUP BY column1;
SELECT * FROM table_name WHERE column1 = 'value' ORDER BY column2 DESC;
SELECT * FROM table_name WHERE column1 = 'value' LIMIT 10;
SELECT * FROM table_name WHERE column1 = 'value' OFFSET 10;
SELECT COUNT(*) FROM table_name WHERE column1 = 'value';
SELECT * FROM table_name WHERE column1 = 'value' AND column2 = 'value' ORDER BY column3 ASC;
SELECT * FROM table_name WHERE column1 = 'value' AND column2 = 'value' LIMIT 10 OFFSET 20;
SELECT COUNT(*) FROM table_name WHERE column1 > 10;
SELECT COUNT(DISTINCT column1) FROM table_name;
SELECT column1, COUNT() FROM table_name GROUP BY column1 HAVING COUNT() > 1;
SELECT column1, COUNT() FROM table_name GROUP BY column1 HAVING COUNT() > 1 ORDER BY COUNT(*) DESC;
SELECT * FROM table_name WHERE DATE(column1) = '2022-01-01';
SELECT * FROM table_name WHERE column1 BETWEEN '2022-01-01' AND '2022-12-31';
SELECT column1, SUM(column2) FROM table_name GROUP BY column1 HAVING SUM(column2) > 100;
SELECT column1, AVG(column2) FROM table_name WHERE column3 = 'value' GROUP BY column1;
SELECT column1, COUNT(*) FROM table_name WHERE column2 LIKE '%value%' GROUP BY column1;
SELECT * FROM customers;
SELECT first_name, last_name, email FROM customers;
SELECT COUNT(*) FROM customers;
SELECT AVG(age) FROM customers;
SELECT MAX(age) FROM customers;
SELECT MIN(age) FROM customers;
SELECT DISTINCT country FROM customers;
SELECT * FROM customers WHERE country = 'USA';
SELECT * FROM customers WHERE age > 30;
SELECT * FROM customers WHERE created_at BETWEEN '2020-01-01' AND '2022-01-01';
SELECT * FROM customers ORDER BY last_name ASC;
SELECT * FROM customers ORDER BY age DESC;
SELECT * FROM customers WHERE customer_id = 100;
SELECT first_name, last_name, email FROM customers WHERE country = 'Canada';
SELECT first_name, last_name, email FROM customers WHERE age > 30 AND country = 'USA';
SELECT * FROM customers WHERE last_name LIKE 'S%';
SELECT * FROM customers WHERE first_name IN ('John', 'Jane', 'Mike');
SELECT * FROM customers WHERE customer_id NOT IN (100, 200, 300);
SELECT first_name, last_name, age FROM customers WHERE age BETWEEN 20 AND 40;
SELECT * FROM customers WHERE email LIKE '%gmail.com';
SELECT * FROM orders;
SELECT * FROM orders WHERE customer_id = 100;
SELECT * FROM orders WHERE created_at BETWEEN '2020-01-01' AND '2022-01-01';
SELECT * FROM orders WHERE status = 'completed';
SELECT * FROM orders WHERE total_amount > 1000;
SELECT * FROM orders ORDER BY created_at ASC;
SELECT * FROM orders ORDER BY total_amount DESC;
SELECT COUNT(*) FROM orders WHERE status = 'completed';
SELECT AVG(total_amount) FROM orders WHERE status = 'completed';
SELECT MAX(total_amount) FROM orders WHERE status = 'completed';
SELECT MIN(total_amount) FROM orders WHERE status = 'completed';
SELECT * FROM order_items;
SELECT * FROM order_items WHERE order_id = 100;
SELECT * FROM order_items WHERE product_id = 50;
SELECT * FROM products;
SELECT * FROM products WHERE price > 100;
SELECT * FROM products WHERE category_id = 10;
SELECT COUNT(*) FROM products WHERE category_id = 10;
SELECT AVG(price) FROM products WHERE category_id = 10;
SELECT MAX(price) FROM products WHERE category_id = 10;
SELECT MIN(price) FROM products WHERE category_id = 10;
SELECT * FROM categories;
SELECT * FROM categories WHERE category_name LIKE 'F%';
SELECT COUNT(*) FROM categories;
SELECT * FROM employees;
SELECT * FROM employees WHERE department_id = 20;
SELECT * FROM employees WHERE salary > 50000;
SELECT COUNT(*) FROM employees WHERE job_id = 'SA_MAN';
SELECT AVG(salary) FROM employees WHERE department_id = 10;
SELECT MAX(salary) FROM employees WHERE department_id = 20;
SELECT MIN(salary) FROM employees WHERE department_id = 30;
SELECT * FROM departments;
SELECT * FROM departments WHERE department_name LIKE '%Sales%';
SELECT COUNT(*) FROM departments;
SELECT * FROM regions;
SELECT * FROM regions WHERE region_name LIKE '%East%';
SELECT COUNT(*) FROM regions;
SELECT * FROM suppliers;
SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM products;
SELECT * FROM suppliers;
SELECT * FROM categories;
SELECT * FROM employees;
SELECT * FROM shippers;
SELECT * FROM order_details;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM orders;
SELECT AVG(price) FROM products;
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products;
SELECT DISTINCT category_name FROM categories;
SELECT * FROM customers WHERE country = 'USA';
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE price > 100;
SELECT * FROM suppliers WHERE country = 'China';
SELECT * FROM employees WHERE hire_date >= '2015-01-01';
SELECT * FROM shippers WHERE shipper_name LIKE '%Express%';
SELECT * FROM customers ORDER BY company_name ASC;
SELECT * FROM orders ORDER BY order_date DESC;
SELECT * FROM products WHERE category_id = 1;
SELECT * FROM products WHERE supplier_id = 3;
SELECT * FROM order_details WHERE order_id = 10248;
SELECT * FROM customers WHERE customer_id = 1;
SELECT * FROM orders WHERE order_id = 10248;
SELECT * FROM products WHERE product_id = 1;
SELECT * FROM suppliers WHERE supplier_id = 1;
SELECT * FROM categories WHERE category_id = 1;
SELECT * FROM employees WHERE employee_id = 1;
SELECT * FROM shippers WHERE shipper_id = 1;
SELECT * FROM customers WHERE city = 'London' AND country = 'UK';
SELECT * FROM orders WHERE shipped_date IS NULL;
SELECT * FROM products WHERE discontinued = 1;
SELECT * FROM suppliers WHERE company_name LIKE '%Technology%';
SELECT * FROM employees WHERE job_title LIKE '%Manager%';
SELECT * FROM customers WHERE postal_code LIKE '1%';
SELECT * FROM orders WHERE employee_id IN (1, 2, 3);
SELECT * FROM products WHERE category_id NOT IN (1, 2);
SELECT * FROM customers WHERE customer_id BETWEEN 1 AND 100;
SELECT * FROM orders WHERE order_date NOT BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE price >= 100 AND price <= 500;
SELECT * FROM customers WHERE country <> 'USA';
SELECT * FROM orders WHERE shipped_date <> '2022-03-01';
SELECT * FROM products WHERE product_name LIKE '%Tablet%';
SELECT * FROM suppliers WHERE city LIKE '%Los Angeles%';
SELECT * FROM employees WHERE birth_date > '1980-01-01';
SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE employee_id = 1);
SELECT * FROM orders WHERE order_id IN (SELECT order_id FROM order_details WHERE product_id = 1);
SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);
SELECT * FROM products WHERE supplier_id = ANY (SELECT supplier_id FROM suppliers WHERE country = 'Japan');
SELECT * FROM customers WHERE country = ALL (SELECT country FROM customers WHERE city = 'Paris');
SELECT * FROM orders WHERE order_date = (SELECT MAX(order_date) FROM orders);
SELECT * FROM customers;
SELECT first_name, last_name, email FROM customers;
SELECT COUNT(*) FROM customers;
SELECT AVG(age) FROM customers;
SELECT MAX(age) FROM customers;
SELECT MIN(age) FROM customers;
SELECT DISTINCT country FROM customers;
SELECT * FROM customers WHERE country = 'USA';
SELECT * FROM customers WHERE age > 18;
SELECT * FROM customers WHERE date_registered BETWEEN '01-JAN-2010' AND '31-DEC-2015';
SELECT * FROM customers ORDER BY last_name ASC;
SELECT * FROM customers ORDER BY age DESC;
SELECT * FROM customers WHERE customer_id = 100;
SELECT first_name, last_name, email FROM customers WHERE country = 'USA';
SELECT first_name, last_name, email FROM customers WHERE age > 18 AND country = 'USA';
SELECT * FROM customers WHERE last_name LIKE 'S%';
SELECT * FROM customers WHERE first_name IN ('John', 'Jane', 'Mike');
SELECT * FROM customers WHERE customer_id NOT IN (100, 200, 300);
SELECT first_name, last_name, age FROM customers WHERE age BETWEEN 18 AND 35;
SELECT * FROM customers WHERE email LIKE '%gmail.com%';
SELECT * FROM orders;
SELECT * FROM orders WHERE customer_id = 100;
SELECT * FROM orders WHERE order_date BETWEEN '01-JAN-2021' AND '31-DEC-2021';
SELECT * FROM orders WHERE order_total > 1000;
SELECT * FROM orders ORDER BY order_date ASC;
SELECT * FROM order_items;
SELECT * FROM order_items WHERE order_id = 100;
SELECT * FROM order_items WHERE product_id = 10;
SELECT * FROM products;
SELECT * FROM products WHERE price > 50;
SELECT * FROM products WHERE category_id = 5;
SELECT * FROM categories;
SELECT * FROM categories WHERE category_id = 10;
SELECT * FROM suppliers;
SELECT * FROM suppliers WHERE country = 'USA';
SELECT * FROM employees;
SELECT * FROM employees WHERE department_id = 10;
SELECT * FROM departments;
SELECT * FROM departments WHERE department_id = 5;
SELECT * FROM shipments;
SELECT * FROM shipments WHERE shipment_date BETWEEN '01-JAN-2021' AND '31-DEC-2021';
SELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id;
SELECT * FROM orders JOIN order_items ON orders.order_id = order_items.order_id;
SELECT * FROM products JOIN categories ON products.category_id = categories.category_id;
SELECT * FROM order_items JOIN products ON order_items.product_id = products.product_id;
SELECT * FROM employees JOIN departments ON employees.department_id = departments.department_id;
SELECT * FROM suppliers JOIN products ON suppliers.supplier_id = products.supplier_id;
SELECT COUNT(*) FROM customers WHERE country = 'USA';
SELECT AVG(age) FROM customers WHERE country = 'USA';
SELECT MAX(age) FROM customers WHERE country = 'USA';
SELECT MIN(age) FROM customers WHERE country = 'USA';
SELECT DISTINCT city FROM customers WHERE country = 'USA';
SELECT * FROM employees;
SELECT first_name, last_name, salary FROM employees;
SELECT COUNT(*) FROM employees;
SELECT AVG(salary) FROM employees;
SELECT MAX(salary) FROM employees;
SELECT MIN(salary) FROM employees;
SELECT DISTINCT department_name FROM employees;
SELECT * FROM employees WHERE department_name = 'IT';
SELECT * FROM employees WHERE salary > 50000;
SELECT * FROM employees WHERE hire_date BETWEEN '01-JAN-2010' AND '31-DEC-2015';
SELECT * FROM employees ORDER BY last_name ASC;
SELECT * FROM employees ORDER BY salary DESC;
SELECT * FROM employees WHERE employee_id = 100;
SELECT first_name, last_name, salary FROM employees WHERE department_id = 10;
SELECT first_name, last_name, salary FROM employees WHERE salary > 50000 AND department_id = 20;
SELECT * FROM employees WHERE last_name LIKE 'S%';
SELECT * FROM employees WHERE first_name IN ('John', 'Jane', 'Mike');
SELECT * FROM employees WHERE employee_id NOT IN (100, 200, 300);
SELECT first_name, last_name, salary FROM employees WHERE salary BETWEEN 30000 AND 50000;
SELECT * FROM employees WHERE job_id LIKE '%MAN%';
SELECT * FROM orders WHERE order_date > '01-JAN-2021';
SELECT COUNT(*) FROM orders WHERE status = 'Shipped';
SELECT SUM(price * quantity) FROM order_items;
SELECT AVG(price) FROM order_items WHERE product_id = 100;
SELECT * FROM customers WHERE customer_id = 1;
SELECT * FROM customers WHERE city = 'New York';
SELECT * FROM products WHERE price > 100;
SELECT * FROM orders WHERE customer_id = 1 ORDER BY order_date DESC;
SELECT * FROM order_items WHERE order_id = 1;
SELECT * FROM suppliers WHERE country = 'USA' AND state = 'California';
SELECT COUNT(*) FROM employees WHERE department_id = 10;
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
SELECT * FROM employees WHERE hire_date > (SELECT MAX(hire_date) - INTERVAL '1' YEAR FROM employees);
SELECT * FROM orders WHERE order_date BETWEEN '01-JAN-2021' AND '31-DEC-2021';
SELECT * FROM orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE city = 'New York');
SELECT product_name, price FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_id = 1);
SELECT * FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE last_name = 'King');
SELECT customer_id, SUM(price * quantity) AS total FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customer_id;
SELECT customer_id, COUNT() AS total_orders FROM orders GROUP BY customer_id HAVING COUNT() > 10;
SELECT customer_id, COUNT() AS total_orders FROM orders WHERE order_date BETWEEN '01-JAN-2021' AND '31-DEC-2021' GROUP BY customer_id HAVING COUNT() > 5;
SELECT * FROM orders WHERE EXISTS (SELECT * FROM customers WHERE customers.customer_id = orders.customer_id AND city = 'New York');
SELECT * FROM employees;
SELECT first_name, last_name, salary FROM employees;
SELECT COUNT(*) FROM employees;
SELECT AVG(salary) FROM employees;
SELECT MAX(salary) FROM employees;
SELECT MIN(salary) FROM employees;
SELECT DISTINCT department_name FROM employees;
SELECT * FROM employees WHERE department_name = 'IT';
SELECT * FROM employees WHERE salary > 50000;
SELECT * FROM employees WHERE hire_date BETWEEN '01-JAN-2010' AND '31-DEC-2015';
SELECT * FROM employees ORDER BY last_name ASC;
SELECT * FROM employees ORDER BY salary DESC;
SELECT * FROM employees WHERE employee_id = 100;
SELECT first_name, last_name, salary FROM employees WHERE department_id = 10;
SELECT first_name, last_name, salary FROM employees WHERE salary > 50000 AND department_id = 20;
SELECT * FROM employees WHERE last_name LIKE 'S%';
SELECT * FROM employees WHERE first_name IN ('John', 'Jane', 'Mike');
SELECT * FROM employees WHERE employee_id NOT IN (100, 200, 300);
SELECT first_name, last_name, salary FROM employees WHERE salary BETWEEN 30000 AND 50000;
SELECT * FROM employees WHERE job_id LIKE '%MAN%';
SELECT AVG(salary) AS average_salary FROM employees GROUP BY department_id;
SELECT department_name, COUNT(*) AS num_employees FROM employees GROUP BY department_name;
SELECT department_name, SUM(salary) AS total_salary FROM employees GROUP BY department_name;
SELECT department_name, AVG(salary) AS average_salary FROM employees WHERE salary > 50000 GROUP BY department_name;
SELECT department_name, MAX(salary) AS highest_salary FROM employees GROUP BY department_name;
SELECT department_name, MIN(salary) AS lowest_salary FROM employees GROUP BY department_name;
SELECT department_name, COUNT(*) AS num_employees, AVG(salary) AS average_salary FROM employees GROUP BY department_name;
SELECT department_name, SUM(salary) AS total_salary, MAX(salary) AS highest_salary FROM employees GROUP BY department_name;
SELECT department_name, MIN(salary) AS lowest_salary, AVG(salary) AS average_salary FROM employees GROUP BY department_name;
SELECT department_name, COUNT(*) AS num_employees, SUM(salary) AS total_salary, AVG(salary) AS average_salary FROM employees GROUP BY department_name;
SELECT COUNT(*) FROM employees WHERE department_name = 'IT';
SELECT SUM(salary) FROM employees WHERE department_name = 'Sales';
SELECT AVG(salary) FROM employees WHERE department_name = 'Marketing';
SELECT MAX(salary) FROM employees WHERE department_name = 'Human Resources';
SELECT MIN(salary) FROM employees WHERE department_name = 'Finance';
SELECT COUNT(*) FROM employees WHERE salary > 50000;
SELECT AVG(salary) FROM employees WHERE hire_date BETWEEN '01-JAN-2010' AND '31-DEC-2015';
SELECT MAX(salary) FROM employees WHERE last_name LIKE 'S%';
SELECT MIN(salary) FROM employees WHERE first_name IN ('John', 'Jane', 'Mike');
SELECT COUNT(*) FROM employees WHERE employee_id NOT IN (100, 200, 300);
SELECT SUM(salary) FROM employees WHERE salary BETWEEN 30000 AND 50000;
SELECT department_name, COUNT(*) AS num_employees FROM employees WHERE salary > 50000 GROUP BY department_name;
SELECT * FROM customers;
SELECT * FROM products;
SELECT * FROM orders;
SELECT * FROM employees;
SELECT * FROM categories;
SELECT * FROM suppliers;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM orders WHERE status = 'Pending';
SELECT AVG(price) FROM products;
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products;
SELECT DISTINCT city FROM customers;
SELECT * FROM customers WHERE country = 'USA';
SELECT * FROM products WHERE price > 50;
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM employees ORDER BY last_name ASC;
SELECT * FROM employees ORDER BY hire_date DESC;
SELECT * FROM customers WHERE customer_id = 1;
SELECT * FROM products WHERE category_id = 2;
SELECT * FROM orders WHERE customer_id = 1 AND status = 'Pending';
SELECT * FROM customers WHERE city LIKE 'New%';
SELECT * FROM suppliers WHERE country IN ('USA', 'Canada');
SELECT * FROM products WHERE price BETWEEN 10 AND 20;
SELECT * FROM employees WHERE job_title LIKE '%Manager%';
SELECT * FROM customers WHERE customer_id NOT IN (1, 2, 3);
SELECT * FROM products WHERE category_id NOT IN (1, 2);
SELECT * FROM orders WHERE order_date >= '2022-01-01' AND order_date <= '2022-12-31';
SELECT * FROM customers WHERE city = 'New York' OR city = 'Los Angeles';
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT * FROM orders WHERE customer_id = (SELECT customer_id FROM customers WHERE last_name = 'Smith');
SELECT * FROM customers WHERE country = (SELECT country FROM customers WHERE customer_id = 1);
SELECT * FROM products WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'Electronics');
SELECT * FROM orders WHERE order_date BETWEEN (SELECT MIN(order_date) FROM orders) AND (SELECT MAX(order_date) FROM orders);
SELECT * FROM orders WHERE status = (SELECT status FROM orders WHERE order_id = 1);
SELECT * FROM customers WHERE customer_id = ANY (SELECT customer_id FROM orders WHERE status = 'Pending');
SELECT * FROM products WHERE price NOT BETWEEN 10 AND 20;
SELECT * FROM customers WHERE city != 'New York';
SELECT * FROM orders WHERE order_date NOT BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE category_id != (SELECT category_id FROM categories WHERE category_name = 'Electronics');
SELECT * FROM orders WHERE customer_id <> (SELECT customer_id FROM customers WHERE last_name = 'Smith');
SELECT * FROM customers WHERE country LIKE '%land';
SELECT * FROM products WHERE product_name LIKE '%phone%';
SELECT * FROM orders WHERE order_date LIKE '2022--';
SELECT * FROM customers WHERE customer_id BETWEEN 1 AND 10;
SELECT * FROM products WHERE price IN (10, 20, 30);
SELECT * FROM orders WHERE status IN ('Pending', 'Shipped');
SELECT * FROM customers WHERE city NOT IN ('New York', 'Los Angeles');
SELECT * FROM employees;
SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM products;
SELECT * FROM categories;
SELECT * FROM suppliers;
SELECT * FROM invoices;
SELECT * FROM payments;
SELECT * FROM shippers;
SELECT * FROM territories;
SELECT * FROM employees WHERE department_id = 1;
SELECT * FROM customers WHERE city = 'New York';
SELECT * FROM orders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31';
SELECT * FROM products WHERE unit_price > 10;
SELECT * FROM categories WHERE category_name LIKE '%electronics%';
SELECT * FROM suppliers WHERE country = 'USA';
SELECT * FROM invoices WHERE total_amount > 100;
SELECT * FROM payments WHERE payment_method = 'Credit Card';
SELECT * FROM shippers WHERE shipper_name LIKE '%express%';
SELECT * FROM territories WHERE region_id = 2;
SELECT COUNT(*) FROM employees;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM orders;
SELECT COUNT(*) FROM products;
SELECT COUNT(*) FROM categories;
SELECT COUNT(*) FROM suppliers;
SELECT COUNT(*) FROM invoices;
SELECT COUNT(*) FROM payments;
SELECT COUNT(*) FROM shippers;
SELECT COUNT(*) FROM territories;
SELECT AVG(salary) FROM employees;
SELECT AVG(unit_price) FROM products;
SELECT AVG(total_amount) FROM invoices;
SELECT SUM(quantity) FROM orders;
SELECT SUM(total_amount) FROM invoices;
SELECT MIN(salary) FROM employees;
SELECT MIN(unit_price) FROM products;
SELECT MIN(total_amount) FROM invoices;
SELECT MAX(salary) FROM employees;
SELECT MAX(unit_price) FROM products;
SELECT MAX(total_amount) FROM invoices;
SELECT DISTINCT city FROM customers;
SELECT DISTINCT category_name FROM categories;
SELECT DISTINCT supplier_name FROM suppliers;
SELECT DISTINCT payment_method FROM payments;
SELECT DISTINCT shipper_name FROM shippers;
SELECT employees.first_name, employees.last_name, departments.department_name FROM employees JOIN departments ON employees.department_id = departments.department_id;
SELECT orders.order_id, customers.customer_name, orders.order_date, orders.shipped_date FROM orders JOIN customers ON orders.customer_id = customers.customer_id;
SELECT products.product_name, categories.category_name, products.unit_price FROM products JOIN categories ON products.category_id = categories.category_id;
SELECT invoices.invoice_id, customers.customer_name, invoices.invoice_date, invoices.total_amount FROM invoices JOIN customers ON invoices.customer_id = customers.customer_id;
SELECT orders.order_id, employees.first_name, employees.last_name, orders.order_date, orders.shipped_date FROM orders JOIN employees ON orders.employee_id = employees.employee_id;
SELECT customers.customer_name, orders.order_id, orders.order_date, SUM(order_details.unit_price * order_details.quantity) AS total_amount FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_details ON orders.order_id = order_details.order_id GROUP BY customers.customer_name, orders.order_id, orders.order_date;
SELECT products.product_name, suppliers.supplier_name, categories.category_name FROM products JOIN suppliers ON products.supplier_id = suppliers.supplier_id JOIN categories ON products.category_id = categories.category_id;
CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), hire_date DATE);
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), contact_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50));
CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, shipped_date DATE, customer_id INT, employee_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id), FOREIGN KEY (employee_id) REFERENCES employees(employee_id));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(100), unit_price DECIMAL(10,2), category_id INT, supplier_id INT, FOREIGN KEY (category_id) REFERENCES categories(category_id), FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id));
CREATE TABLE categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));
CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(100), contact_name VARCHAR(100), country VARCHAR(50));
CREATE TABLE invoices (invoice_id INT PRIMARY KEY, invoice_date DATE, total_amount DECIMAL(10,2), customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));
CREATE TABLE payments (payment_id INT PRIMARY KEY, payment_date DATE, payment_method VARCHAR(50), invoice_id INT, FOREIGN KEY (invoice_id) REFERENCES invoices(invoice_id));
CREATE TABLE shippers (shipper_id INT PRIMARY KEY, shipper_name VARCHAR(100));
CREATE TABLE territories (territory_id INT PRIMARY KEY, territory_name VARCHAR(100), region_id INT, FOREIGN KEY (region_id) REFERENCES regions(region_id));
CREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100));
CREATE TABLE region (region_id INT PRIMARY KEY, region_name VARCHAR(100));
CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(100), password VARCHAR(100), email VARCHAR(100));
CREATE TABLE messages (message_id INT PRIMARY KEY, sender_id INT, receiver_id INT, message_text TEXT, message_date DATETIME, FOREIGN KEY (sender_id) REFERENCES users(user_id), FOREIGN KEY (receiver_id) REFERENCES users(user_id));
CREATE TABLE products_order (order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));
CREATE TABLE product_reviews (review_id INT PRIMARY KEY, product_id INT, user_id INT, review_text TEXT, review_date DATETIME, FOREIGN KEY (product_id) REFERENCES products(product_id), FOREIGN KEY (user_id) REFERENCES users(user_id));
CREATE TABLE product_ratings (rating_id INT PRIMARY KEY, product_id INT, user_id INT, rating INT, FOREIGN KEY (product_id) REFERENCES products(product_id), FOREIGN KEY (user_id) REFERENCES users(user_id));
CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT, post_text TEXT, post_date DATETIME, FOREIGN KEY (user_id) REFERENCES users(user_id));
CREATE TABLE comments (comment_id INT PRIMARY KEY, post_id INT, user_id INT, comment_text TEXT, comment_date DATETIME, FOREIGN KEY (post_id) REFERENCES posts(post_id), FOREIGN KEY (user_id) REFERENCES users(user_id));
CREATE TABLE likes (like_id INT PRIMARY KEY, post_id INT, user_id INT, FOREIGN KEY (post_id) REFERENCES posts(post_id), FOREIGN KEY (user_id) REFERENCES users(user_id));
CREATE DATABASE mydatabase;
CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, salary DECIMAL(10,2));
CREATE TABLE customers (id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(50), phone VARCHAR(20));
CREATE TABLE orders (id INT PRIMARY KEY, customer_id INT, order_date DATE, shipped_date DATE, total_amount DECIMAL(10,2));
CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(50), description VARCHAR(200), unit_price DECIMAL(10,2), category_id INT);
CREATE TABLE categories (id INT PRIMARY KEY, name VARCHAR(50));
CREATE TABLE suppliers (id INT PRIMARY KEY, name VARCHAR(50), contact_name VARCHAR(50), country VARCHAR(50));
CREATE TABLE invoices (id INT PRIMARY KEY, customer_id INT, invoice_date DATE, total_amount DECIMAL(10,2));
CREATE TABLE payments (id INT PRIMARY KEY, invoice_id INT, payment_method VARCHAR(50), amount DECIMAL(10,2));
CREATE TABLE shippers (id INT PRIMARY KEY, name VARCHAR(50), phone VARCHAR(20));
CREATE TABLE territories (id INT PRIMARY KEY, name VARCHAR(50), region_id INT);
CREATE INDEX idx_employees_department_id ON employees (department_id);
CREATE INDEX idx_customers_city ON customers (city);
CREATE INDEX idx_orders_order_date ON orders (order_date);
CREATE INDEX idx_products_unit_price ON products (unit_price);
CREATE INDEX idx_categories_category_name ON categories (category_name);
CREATE INDEX idx_suppliers_country ON suppliers (country);
CREATE INDEX idx_invoices_total_amount ON invoices (total_amount);
CREATE INDEX idx_payments_payment_method ON payments (payment_method);
CREATE INDEX idx_shippers_shipper_name ON shippers (shipper_name);
CREATE INDEX idx_territories_region_id ON territories (region_id);
CREATE UNIQUE INDEX idx_employees_email ON employees (email);
CREATE UNIQUE INDEX idx_customers_email ON customers (email);
CREATE UNIQUE INDEX idx_products_name ON products (name);
CREATE UNIQUE INDEX idx_categories_name ON categories (name);
CREATE UNIQUE INDEX idx_suppliers_name ON suppliers (name);
CREATE UNIQUE INDEX idx_invoices_invoice_date ON invoices (invoice_date);
CREATE UNIQUE INDEX idx_payments_id ON payments (id);
CREATE UNIQUE INDEX idx_shippers_name ON shippers (name);
CREATE UNIQUE INDEX idx_territories_name ON territories (name);
CREATE TRIGGER tr_customers_insert BEFORE INSERT ON customers FOR EACH ROW SET NEW.created_at = NOW();
CREATE TRIGGER tr_customers_update BEFORE UPDATE ON customers FOR EACH ROW SET NEW.updated_at = NOW();
CREATE TRIGGER tr_orders_insert BEFORE INSERT ON orders FOR EACH ROW SET NEW.created_at = NOW();
CREATE TRIGGER tr_orders_update BEFORE UPDATE ON orders FOR EACH ROW SET NEW.updated_at = NOW();
CREATE TRIGGER tr_products_insert BEFORE INSERT ON products FOR EACH ROW SET NEW.created_at = NOW();
CREATE TRIGGER tr_products_update BEFORE UPDATE ON products FOR EACH ROW SET NEW.updated_at = NOW();
CREATE TRIGGER tr_invoices_insert BEFORE INSERT ON invoices FOR EACH ROW SET NEW.created_at = NOW();
CREATE TRIGGER tr_invoices_update BEFORE UPDATE ON invoices FOR EACH ROW SET NEW.updated_at = NOW();
CREATE TRIGGER tr_payments_insert BEFORE INSERT ON payments FOR EACH ROW SET NEW.created_at = NOW();
CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, salary FLOAT);
CREATE TABLE customers (id INT PRIMARY KEY, name VARCHAR(50), address VARCHAR(100), city VARCHAR(50), country VARCHAR(50));
CREATE TABLE orders (id INT PRIMARY KEY, customer_id INT, order_date DATE, shipped_date DATE, total_amount FLOAT);
CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(50), description VARCHAR(200), unit_price FLOAT, category_id INT, supplier_id INT);
CREATE TABLE categories (id INT PRIMARY KEY, name VARCHAR(50), description VARCHAR(200));
CREATE TABLE suppliers (id INT PRIMARY KEY, name VARCHAR(50), contact_name VARCHAR(50), address VARCHAR(100), city VARCHAR(50), country VARCHAR(50));
CREATE TABLE invoices (id INT PRIMARY KEY, customer_id INT, invoice_date DATE, total_amount FLOAT);
CREATE TABLE payments (id INT PRIMARY KEY, invoice_id INT, payment_date DATE, payment_method VARCHAR(50), amount FLOAT);
CREATE TABLE shippers (id INT PRIMARY KEY, name VARCHAR(50), phone VARCHAR(20));
CREATE TABLE territories (id INT PRIMARY KEY, name VARCHAR(50), region_id INT);
CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50), manager_id INT);
CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50), email VARCHAR(50));
CREATE TABLE posts (id INT PRIMARY KEY, title VARCHAR(50), content VARCHAR(200), created_at DATETIME, author_id INT);
CREATE TABLE comments (id INT PRIMARY KEY, content VARCHAR(200), created_at DATETIME, post_id INT, author_id INT);
CREATE TABLE roles (id INT PRIMARY KEY, name VARCHAR(50));
CREATE TABLE permissions (id INT PRIMARY KEY, name VARCHAR(50));
CREATE TABLE role_permissions (role_id INT, permission_id INT);
CREATE TABLE orders_history (id INT PRIMARY KEY, order_id INT, status VARCHAR(50), updated_at DATETIME);
CREATE TABLE messages (id INT PRIMARY KEY, sender_id INT, receiver_id INT, content VARCHAR(200), sent_at DATETIME);
CREATE TABLE notifications (id INT PRIMARY KEY, user_id INT, message VARCHAR(200), created_at DATETIME);
CREATE TABLE products_reviews (id INT PRIMARY KEY, product_id INT, user_id INT, rating INT, comment VARCHAR(200), created_at DATETIME);
CREATE TABLE categories_subcategories (category_id INT, subcategory_id INT);
CREATE TABLE carts (id INT PRIMARY KEY, user_id INT);
CREATE TABLE cart_items (id INT PRIMARY KEY, cart_id INT, product_id INT, quantity INT);
CREATE TABLE orders_items (id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT);
CREATE TABLE users_roles (user_id INT, role_id INT);
CREATE TABLE profiles (id INT PRIMARY KEY, user_id INT, first_name VARCHAR(50), last_name VARCHAR(50), bio VARCHAR(200), profile_pic VARCHAR(100));
CREATE TABLE messages_conversations (id INT PRIMARY KEY, user1_id INT, user2_id INT);
CREATE TABLE conversations_messages (id INT PRIMARY KEY, conversation_id INT, sender_id INT, message VARCHAR(200), sent_at DATETIME);
CREATE TABLE products_images (id INT PRIMARY KEY, product_id INT, image_url VARCHAR(100));
CREATE DATABASE mydatabase;
CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT);
CREATE INDEX idx_name ON employees(name);
CREATE VIEW employee_details AS SELECT id, name, age FROM employees WHERE age > 30;
CREATE TRIGGER new_employee_trigger BEFORE INSERT ON employees FOR EACH ROW INSERT INTO employee_log (employee_id, action) VALUES (NEW.id, 'Inserted');
CREATE PROCEDURE insert_employee (employee_id INT, employee_name VARCHAR(50), employee_age INT) BEGIN INSERT INTO employees (id, name, age) VALUES (employee_id, employee_name, employee_age); END;
CREATE FUNCTION get_employee_count () RETURNS INT BEGIN DECLARE employee_count INT; SELECT COUNT(*) INTO employee_count FROM employees; RETURN employee_count; END;
CREATE USER 'myuser'@'localhost' IDENTIFIED BY 'mypassword';
CREATE ROLE manager;
CREATE DATABASE mydatabase CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE TABLE departments (id INT PRIMARY KEY, name VARCHAR(50));
CREATE INDEX idx_department_name ON departments(name);
CREATE VIEW department_summary AS SELECT departments.name, COUNT(*) AS employee_count FROM employees JOIN departments ON employees.department_id = departments.id GROUP BY departments.name;
CREATE TRIGGER delete_employee_trigger BEFORE DELETE ON employees FOR EACH ROW INSERT INTO employee_log (employee_id, action) VALUES (OLD.id, 'Deleted');
CREATE PROCEDURE update_employee_age (employee_id INT, new_age INT) BEGIN UPDATE employees SET age = new_age WHERE id = employee_id; END;
CREATE FUNCTION get_department_employee_count (department_id INT) RETURNS INT BEGIN DECLARE employee_count INT; SELECT COUNT(*) INTO employee_count FROM employees WHERE department_id = department_id; RETURN employee_count; END;
CREATE USER 'myuser'@'%' IDENTIFIED BY 'mypassword';
CREATE ROLE admin;
CREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(50), price DECIMAL(10, 2), category_id INT);
CREATE INDEX idx_product_category ON products(category_id);
CREATE VIEW product_summary AS SELECT categories.name AS category_name, COUNT(*) AS product_count FROM products JOIN categories ON products.category_id = categories.id GROUP BY categories.name;
CREATE TRIGGER update_product_trigger BEFORE UPDATE ON products FOR EACH ROW INSERT INTO product_log (product_id, action) VALUES (OLD.id, 'Updated');
CREATE PROCEDURE delete_product (product_id INT) BEGIN DELETE FROM products WHERE id = product_id; END;
CREATE FUNCTION get_product_price (product_id INT) RETURNS DECIMAL(10, 2) BEGIN DECLARE price DECIMAL(10, 2); 
SELECT price INTO price FROM products WHERE id = product_id; RETURN price; END;
CREATE USER 'myuser'@'192.168.1.%' IDENTIFIED BY 'mypassword';
CREATE ROLE customer;
CREATE DATABASE mydatabase CHARACTER SET latin1 COLLATE latin1_swedish_ci;
CREATE TABLE orders (id INT PRIMARY KEY, customer_id INT, order_date DATE);
CREATE INDEX idx_order_customer ON orders(customer_id);
CREATE VIEW order_summary AS SELECT customers.name AS customer_name, COUNT(*) AS order_count FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY customers.name;
CREATE TRIGGER insert_order_trigger AFTER INSERT ON orders FOR EACH ROW INSERT INTO order_log (order_id, action) VALUES (NEW.id, 'Inserted');
SELECT * FROM customers;
SELECT name, email FROM customers;
SELECT COUNT(*) FROM customers;
SELECT MAX(age) FROM customers;
SELECT AVG(age) FROM customers;
SELECT * FROM customers WHERE age > 25;
SELECT * FROM customers ORDER BY name ASC;
SELECT * FROM customers WHERE name LIKE '%John%';
SELECT * FROM customers WHERE email LIKE '%gmail.com%';
SELECT * FROM customers WHERE age BETWEEN 20 AND 30;
SELECT * FROM customers WHERE city IN ('New York', 'Los Angeles');
SELECT * FROM customers WHERE state NOT IN ('California', 'Texas');
SELECT * FROM customers WHERE name = 'John' AND city = 'New York';
SELECT * FROM customers WHERE name = 'John' OR city = 'New York';
SELECT * FROM customers LIMIT 10;
SELECT * FROM customers WHERE age > 25 LIMIT 10;
SELECT * FROM customers WHERE age > 25 ORDER BY name ASC LIMIT 10;
SELECT COUNT(*) FROM orders WHERE customer_id = 123;
SELECT AVG(price) FROM products WHERE category_id = 456;
SELECT MIN(price) FROM products WHERE category_id = 456;
SELECT MAX(price) FROM products WHERE category_id = 456;
SELECT name, SUM(price) FROM orders JOIN products ON orders.product_id = products.id GROUP BY name;
SELECT name, COUNT(*) FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY name;
SELECT * FROM products WHERE name LIKE '%iPhone%' AND price > 1000;
SELECT * FROM customers WHERE email REGEXP '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,}';
SELECT * FROM customers WHERE age = (SELECT MAX(age) FROM customers);
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE price = (SELECT MIN(price) FROM products WHERE category_id = 456);
SELECT * FROM customers WHERE name IN (SELECT name FROM orders JOIN customers ON orders.customer_id = customers.id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31');
SELECT name, COUNT(*) FROM orders JOIN customers ON orders.customer_id = customers.id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY name;
SELECT name, COUNT(*) FROM orders JOIN customers ON orders.customer_id = customers.id WHERE YEAR(order_date) = 2022 GROUP BY name;
SELECT * FROM customers WHERE id = ANY (SELECT customer_id FROM orders WHERE product_id = 789);
SELECT * FROM orders WHERE customer_id = ALL (SELECT id FROM customers WHERE age > 25);
SELECT * FROM customers WHERE age NOT BETWEEN 20 AND 30;
SELECT name, COUNT() FROM orders JOIN products ON orders.product_id = products.id GROUP BY name HAVING COUNT() > 10;
SELECT * FROM customers WHERE age > (SELECT AVG(age) FROM customers);
SELECT * FROM orders WHERE product_id IN (SELECT id FROM products WHERE category_id = 456);
SELECT * FROM orders WHERE product_id NOT IN (SELECT id FROM products WHERE category_id = 456);
SELECT * FROM products WHERE category_id = 456 AND price > (SELECT AVG(price) FROM products WHERE category_id = 456);
SELECT * FROM employees;
SELECT name, age FROM employees;
SELECT COUNT(*) FROM employees;
SELECT AVG(age) FROM employees;
SELECT MAX(age) FROM employees;
SELECT MIN(age) FROM employees;
SELECT * FROM employees WHERE age > 30;
SELECT * FROM employees WHERE name LIKE '%John%';
SELECT * FROM employees ORDER BY age DESC;
SELECT * FROM employees LIMIT 10;
SELECT * FROM employees WHERE department = 'Sales';
SELECT COUNT(*) FROM employees WHERE department = 'Marketing';
SELECT name, SUM(sales) AS total_sales FROM sales GROUP BY name;
SELECT name, AVG(age) AS avg_age FROM employees GROUP BY name;
SELECT name, COUNT(*) AS total_orders FROM orders JOIN customers ON orders.customer_id = customers.id WHERE customers.country = 'USA' GROUP BY name;
SELECT * FROM employees JOIN departments ON employees.department_id = departments.id;
SELECT * FROM employees LEFT JOIN departments ON employees.department_id = departments.id;
SELECT * FROM employees RIGHT JOIN departments ON employees.department_id = departments.id;
SELECT name, AVG(age) AS avg_age FROM employees GROUP BY name HAVING AVG(age) > 30;
SELECT DISTINCT department FROM employees;
SELECT * FROM employees WHERE age BETWEEN 25 AND 35;
SELECT * FROM employees WHERE age NOT BETWEEN 25 AND 35;
SELECT * FROM employees WHERE name IN ('John', 'Mary', 'Tom');
SELECT * FROM employees WHERE name NOT IN ('John', 'Mary', 'Tom');
SELECT * FROM employees WHERE department LIKE '%sales%';
SELECT * FROM employees WHERE department NOT LIKE '%sales%';
SELECT * FROM employees WHERE name IS NULL;
SELECT * FROM employees WHERE name IS NOT NULL;
INSERT INTO employees (id, name, age) VALUES (1, 'John', 30);
UPDATE employees SET age = 35 WHERE name = 'John';
DELETE FROM employees WHERE age > 40;
ALTER TABLE employees ADD COLUMN salary INT;
CREATE TABLE customers (id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(50));
DROP TABLE customers;
CREATE INDEX idx_name ON employees(name);
CREATE UNIQUE INDEX idx_email ON customers(email);
CREATE VIEW employee_details AS SELECT id, name, age, salary FROM employees WHERE age > 30;
DROP VIEW employee_details;
CREATE TRIGGER new_employee_trigger BEFORE INSERT ON employees FOR EACH ROW INSERT INTO employee_log (employee_id, action) VALUES (NEW.id, 'Inserted');
DROP TRIGGER new_employee_trigger;
CREATE PROCEDURE insert_employee (employee_id INT, employee_name VARCHAR(50), employee_age INT) BEGIN INSERT INTO employees (id, name, age) VALUES (employee_id, employee_name, employee_age); END;
DROP PROCEDURE insert_employee;
CREATE FUNCTION get_employee_count () RETURNS INT BEGIN DECLARE employee_count INT; SELECT COUNT(*) INTO employee_count FROM employees; RETURN employee_count; END;
DROP FUNCTION get_employee_count;
CREATE USER 'myuser'@'localhost' IDENTIFIED BY 'mypassword';
DROP USER 'myuser'@'localhost';
GRANT SELECT ON employees TO 'myuser'@'localhost';
REVOKE SELECT ON employees FROM 'myuser'@'localhost';
CREATE ROLE manager;
DROP ROLE manager;
SELECT * FROM customers;
SELECT name, email FROM customers WHERE city = 'New York';
SELECT COUNT(*) FROM orders;
SELECT AVG(price) FROM products WHERE category = 'Electronics';
SELECT MAX(date) FROM orders;
SELECT * FROM orders WHERE date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE price > 1000 AND stock > 0;
SELECT name, price FROM products WHERE category = 'Clothing' ORDER BY price DESC;
SELECT DISTINCT city FROM customers;
SELECT name, category, price FROM products WHERE category IN ('Electronics', 'Home Appliances');
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE city = 'Chicago');
SELECT SUM(quantity) FROM order_items WHERE order_id = 1001;
SELECT name, email FROM customers WHERE name LIKE 'J%';
SELECT AVG(price) FROM products WHERE category = 'Books' AND publisher = 'Penguin';
SELECT MIN(date) FROM orders WHERE customer_id = 1002;
SELECT * FROM orders WHERE date > '2023-01-01' AND customer_id IN (SELECT id FROM customers WHERE state = 'CA');
SELECT name, price FROM products WHERE name LIKE '%case%' AND category = 'Electronics';
SELECT name, price FROM products WHERE category = 'Clothing' LIMIT 10;
SELECT COUNT(*) FROM orders WHERE customer_id = 1001 AND date BETWEEN '2023-01-01' AND '2023-12-31';
SELECT name, price FROM products WHERE price BETWEEN 500 AND 1000;
SELECT * FROM orders WHERE date BETWEEN '2022-01-01' AND '2022-12-31' AND customer_id = 1003;
SELECT AVG(price) FROM products WHERE category = 'Books' AND publisher LIKE '%Random House%';
SELECT name, price FROM products WHERE category = 'Home Appliances' ORDER BY name ASC;
SELECT SUM(price * quantity) FROM order_items WHERE order_id = 1002;
SELECT name, email FROM customers WHERE email LIKE '%gmail.com';
SELECT MIN(price) FROM products WHERE category = 'Clothing' AND stock > 0;
SELECT name, category FROM products WHERE name LIKE '%shirt%' AND (category = 'Clothing' OR category = 'Accessories');
SELECT COUNT(*) FROM orders WHERE customer_id = 1001 AND date BETWEEN '2022-01-01' AND '2022-12-31' AND total > 100;
SELECT name, price FROM products WHERE category = 'Electronics' AND manufacturer = 'Sony' ORDER BY price DESC LIMIT 5;
SELECT SUM(quantity) FROM order_items WHERE product_id = 101;
SELECT name, price FROM products WHERE category = 'Home Appliances' AND stock > 0 ORDER BY name ASC LIMIT 10;
SELECT COUNT(*) FROM orders WHERE date BETWEEN '2022-01-01' AND '2022-12-31' AND total > 500;
SELECT name, price FROM products WHERE category = 'Clothing' AND (color = 'red' OR color = 'blue') ORDER BY price DESC;
SELECT AVG(price) FROM products WHERE category = 'Electronics' AND manufacturer LIKE '%Samsung%';
SELECT name, price FROM products WHERE price > (SELECT AVG(price) FROM products) AND stock > 0 ORDER BY price DESC;
SELECT * FROM customers;
SELECT first_name, last_name FROM employees;
SELECT COUNT(*) FROM orders;
SELECT AVG(price) FROM products;
SELECT * FROM employees WHERE age > 30;
SELECT SUM(quantity * price) FROM order_items;
SELECT DISTINCT category FROM products;
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31';
SELECT first_name, last_name, salary FROM employees ORDER BY salary DESC;
SELECT * FROM products WHERE category = 'Electronics' AND price < 500;
SELECT COUNT(*) FROM employees WHERE department = 'Sales';
SELECT MAX(price) FROM products WHERE category = 'Clothing';
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE city = 'New York');
SELECT AVG(salary) FROM employees GROUP BY department;
SELECT * FROM products WHERE name LIKE '%Samsung%';
SELECT COUNT(*) FROM orders WHERE order_date >= DATE_SUB(NOW(), INTERVAL 7 DAY);
SELECT * FROM employees WHERE department IN ('Marketing', 'Sales') AND age > 25;
SELECT MIN(price) FROM products WHERE category = 'Books';
SELECT * FROM orders WHERE customer_id = 1234 ORDER BY order_date DESC LIMIT 10;
SELECT COUNT(*) FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
SELECT * FROM products WHERE price BETWEEN 100 AND 200 AND category = 'Toys';
SELECT MAX(salary), MIN(salary), AVG(salary) FROM employees WHERE department = 'IT';
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31' AND customer_id = 5678;
SELECT COUNT(DISTINCT category) FROM products;
SELECT * FROM employees WHERE department LIKE '%Development%';
SELECT SUM(quantity * price) AS revenue FROM order_items WHERE order_id = 1234;
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE email = 'johndoe@example.com');
SELECT AVG(price) FROM products WHERE category = 'Clothing' AND name LIKE '%Shirt%';
SELECT * FROM employees WHERE department = 'Finance' ORDER BY salary DESC LIMIT 5;
SELECT COUNT(*) FROM orders WHERE order_date >= '2022-01-01' AND order_date < '2022-02-01';
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products) AND category = 'Electronics';
SELECT MIN(price), MAX(price) FROM products WHERE category = 'Toys';
SELECT * FROM orders WHERE order_date BETWEEN '2022-01-01' AND '2022-01-31' AND customer_id = 5678 ORDER BY order_date DESC LIMIT 5;
SELECT COUNT(*) FROM employees WHERE age BETWEEN 25 AND 30;
SELECT * FROM products WHERE price > (SELECT MAX(price) FROM products WHERE category = 'Books') AND category = 'Electronics';
SELECT * FROM employees WHERE department = 'Marketing' ORDER BY age DESC;
SELECT AVG(price), COUNT(*) FROM products WHERE category = 'Clothing' GROUP BY brand;
SELECT * FROM orders WHERE order_date >= '2022-01-01' AND order_date < '2022-02-01' AND customer_id IN (SELECT id FROM customers WHERE state = 'California');
SELECT * FROM customers;
SELECT name, email FROM customers;
SELECT COUNT(*) FROM customers;
SELECT AVG(age) FROM customers;
SELECT MAX(balance) FROM customers;
SELECT MIN(age) FROM customers;
SELECT SUM(balance) FROM customers;
SELECT * FROM customers WHERE age > 30;
SELECT * FROM customers WHERE email LIKE '%gmail.com';
SELECT * FROM customers ORDER BY name ASC;
SELECT * FROM customers ORDER BY balance DESC;
SELECT * FROM customers LIMIT 10;
SELECT * FROM customers LIMIT 10 OFFSET 20;
SELECT * FROM customers WHERE age BETWEEN 25 AND 35;
SELECT * FROM customers WHERE name IN ('John', 'Jane', 'Bob');
SELECT * FROM customers WHERE NOT name IN ('John', 'Jane', 'Bob');
SELECT * FROM customers WHERE name LIKE 'J%';
SELECT * FROM customers WHERE name LIKE '%hn%';
SELECT * FROM customers WHERE address IS NULL;
SELECT * FROM customers WHERE address IS NOT NULL;
SELECT * FROM customers WHERE age > 30 AND balance > 1000;
SELECT * FROM customers WHERE age > 30 OR balance > 1000;
SELECT * FROM customers WHERE age > 30 AND (balance > 1000 OR email LIKE '%gmail.com');
SELECT * FROM customers WHERE name = 'John' UNION SELECT * FROM customers WHERE name = 'Jane';
SELECT * FROM customers WHERE name = 'John' INTERSECT SELECT * FROM customers WHERE age > 30;
SELECT * FROM customers WHERE name = 'John' EXCEPT SELECT * FROM customers WHERE age > 30;
SELECT COUNT(*) FROM orders;
SELECT AVG(total) FROM orders;
SELECT MAX(date) FROM orders;
SELECT MIN(total) FROM orders;
SELECT SUM(quantity) FROM order_items;
SELECT * FROM orders WHERE date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE name = 'John');
SELECT * FROM orders WHERE id NOT IN (SELECT order_id FROM order_items WHERE product_id = 1);
SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id;
SELECT * FROM orders LEFT JOIN customers ON orders.customer_id = customers.id;
SELECT * FROM orders RIGHT JOIN customers ON orders.customer_id = customers.id;
SELECT * FROM orders INNER JOIN customers ON orders.customer_id = customers.id;
SELECT * FROM orders FULL OUTER JOIN customers ON orders.customer_id = customers.id;
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customer_id = customers.id);
SELECT * FROM customers WHERE NOT EXISTS (SELECT * FROM orders WHERE customer_id = customers.id);
SELECT name, COUNT(*) FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY name;
SELECT name, SUM(total) FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY name;
SELECT name, AVG(total) FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY name;
SELECT name, MAX(total) FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY name;
SELECT name, MIN(total) FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY name;
SELECT category, COUNT(*) FROM products GROUP BY category;
SELECT category, AVG(price) FROM products GROUP BY category;
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT * FROM products WHERE price BETWEEN 10 AND 20;
SELECT * FROM products WHERE category = 'Electronics' AND price > 100;
SELECT * FROM products WHERE name LIKE '%iPhone%' OR name LIKE '%Samsung%';
SELECT * FROM products WHERE description LIKE '%waterproof%';
SELECT * FROM products WHERE NOT (name LIKE '%iPhone%' OR name LIKE '%Samsung%');
SELECT * FROM products WHERE id IN (SELECT product_id FROM order_items WHERE order_id = 1);
SELECT * FROM products WHERE id NOT IN (SELECT product_id FROM order_items WHERE order_id = 1);
SELECT * FROM products ORDER BY name ASC;
SELECT * FROM products ORDER BY price DESC;
SELECT * FROM products LIMIT 10;
SELECT * FROM products LIMIT 10 OFFSET 20;
SELECT * FROM products WHERE category = 'Electronics' LIMIT 5;
SELECT * FROM products WHERE category = 'Clothing' LIMIT 5 OFFSET 5;
SELECT * FROM products WHERE id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT * FROM products WHERE id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY SUM(quantity) DESC LIMIT 1);
SELECT * FROM customers WHERE age = (SELECT MAX(age) FROM customers);
SELECT * FROM customers WHERE balance = (SELECT MIN(balance) FROM customers);
SELECT * FROM customers WHERE name = (SELECT name FROM customers GROUP BY name HAVING COUNT(*) > 1);
SELECT * FROM customers WHERE name = (SELECT name FROM customers GROUP BY name HAVING SUM(balance) > 10000);
SELECT * FROM customers WHERE age > (SELECT AVG(age) FROM customers);
SELECT * FROM customers WHERE balance > (SELECT AVG(balance) FROM customers WHERE age > 30);
SELECT * FROM orders WHERE total = (SELECT MAX(total) FROM orders WHERE date BETWEEN '2022-01-01' AND '2022-12-31');
SELECT * FROM orders WHERE date = (SELECT MIN(date) FROM orders WHERE total > 1000);
SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE name = 'John');
SELECT * FROM orders WHERE customer_id = ANY (SELECT id FROM customers WHERE age > 30);
SELECT * FROM orders WHERE customer_id = ALL (SELECT id FROM customers WHERE age > 30);
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE age > 30) AND date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT name, AVG(total) FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY name HAVING AVG(total) > 1000;
SELECT category, AVG(price) FROM products GROUP BY category HAVING AVG(price) > 50;
SELECT name, COUNT() FROM orders JOIN customers ON orders.customer_id = customers.id GROUP BY name ORDER BY COUNT() DESC LIMIT 10;
SELECT category, SUM(quantity) FROM order_items JOIN products ON order_items.product_id = products.id GROUP BY category ORDER BY SUM(quantity) DESC LIMIT 5;
SELECT name, SUM(total) FROM orders JOIN customers ON orders.customer_id = customers.id WHERE date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY name ORDER BY SUM(total) DESC LIMIT 10;
SELECT first_name, last_name, email FROM employees;
SELECT COUNT(*) FROM employees;
SELECT AVG(salary) FROM employees;
SELECT MAX(hire_date) FROM employees;
SELECT MIN(salary) FROM employees;
SELECT SUM(salary) FROM employees;
SELECT * FROM employees WHERE department_id = 10;
SELECT * FROM employees WHERE salary BETWEEN 5000 AND 10000;
SELECT * FROM employees ORDER BY first_name ASC;
SELECT * FROM employees ORDER BY hire_date DESC;
SELECT * FROM employees LIMIT 5;
SELECT * FROM employees LIMIT 5 OFFSET 10;
SELECT * FROM employees WHERE hire_date >= '2005-01-01';
SELECT * FROM employees WHERE last_name LIKE '%son';
SELECT * FROM employees WHERE job_id IN ('IT_PROG', 'SA_MAN', 'ST_CLERK');
SELECT * FROM employees WHERE commission_pct IS NULL;
SELECT * FROM employees WHERE commission_pct IS NOT NULL;
SELECT * FROM employees WHERE salary > 8000 AND department_id = 80;
SELECT * FROM employees WHERE manager_id IN (SELECT employee_id FROM employees WHERE department_id = 50);
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = 90);
SELECT * FROM employees WHERE department_id = 60 UNION SELECT * FROM employees WHERE department_id = 80;
SELECT * FROM employees WHERE department_id = 60 INTERSECT SELECT * FROM employees WHERE department_id = 80;
SELECT * FROM employees WHERE department_id = 60 EXCEPT SELECT * FROM employees WHERE department_id = 80;
SELECT COUNT(*) FROM departments;
SELECT AVG(budget) FROM departments;
SELECT MAX(location_id) FROM departments;
SELECT MIN(manager_id) FROM departments;
SELECT SUM(num_employees) FROM departments;
SELECT * FROM departments WHERE manager_id IS NULL;
SELECT * FROM departments WHERE location_id IN (SELECT location_id FROM locations WHERE country_id = 'US');
SELECT * FROM departments WHERE department_id NOT IN (SELECT department_id FROM job_history);
SELECT * FROM employees WHERE job_id LIKE '%REP';
SELECT * FROM employees WHERE salary > 10000 AND department_id IN (SELECT department_id FROM locations WHERE city = 'Seattle');
SELECT * FROM employees JOIN departments ON employees.department_id = departments.department_id;
SELECT * FROM employees LEFT JOIN departments ON employees.department_id = departments.department_id;
SELECT * FROM employees RIGHT JOIN departments ON employees.department_id = departments.department_id;
SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;
SELECT * FROM employees FULL OUTER JOIN departments ON employees.department_id = departments.department_id;
SELECT * FROM departments WHERE EXISTS (SELECT * FROM employees WHERE employees.department_id = departments.department_id);
SELECT * FROM departments WHERE NOT EXISTS (SELECT * FROM employees WHERE employees.department_id = departments.department_id);
SELECT department_name, COUNT(*) FROM employees JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name;
SELECT department_name, AVG(salary) FROM employees JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name;
SELECT department_name, MAX(salary) FROM employees JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name;
SELECT department_name, MIN(salary) FROM employees JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name;
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT * FROM products WHERE category = 'Clothing' AND price BETWEEN 50 AND 100;
SELECT * FROM products WHERE description LIKE '%cotton%' OR description LIKE '%linen%';
SELECT * FROM products ORDER BY price DESC LIMIT 10;
SELECT * FROM products ORDER BY price ASC LIMIT 10;
SELECT * FROM products WHERE NOT category = 'Electronics';
SELECT * FROM products WHERE manufacturer = 'Samsung' AND (category = 'Phones' OR category = 'Tablets');
SELECT * FROM products WHERE NOT manufacturer IN ('Apple', 'Samsung');
SELECT * FROM products WHERE name REGEXP '[0-9]';
SELECT * FROM products WHERE LENGTH(description) > 100;
SELECT * FROM products WHERE YEAR(created_at) = 2022;
SELECT * FROM products WHERE DATE(created_at) = '2022-05-01';
SELECT * FROM products WHERE MONTH(created_at) = 5 AND YEAR(created_at) = 2022;
SELECT * FROM products WHERE price = (SELECT MAX(price) FROM products WHERE category = 'Electronics');
SELECT * FROM products WHERE price = (SELECT MIN(price) FROM products WHERE category = 'Clothing');
SELECT AVG(price), category FROM products GROUP BY category HAVING AVG(price) > 100;
SELECT COUNT(*) FROM orders WHERE DATE(created_at) = CURDATE();
SELECT COUNT(*) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM orders WHERE customer_id = 1 AND DATE(created_at) = '2022-05-01';
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id HAVING SUM(total) > 1000;
SELECT COUNT(*) FROM order_items WHERE product_id = 1;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id ORDER BY SUM(quantity) DESC LIMIT 10;
SELECT customer_id, SUM(total) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id HAVING SUM(total) > 1000;
SELECT category, SUM(price) FROM products GROUP BY category WITH ROLLUP;
SELECT category, AVG(price) FROM products GROUP BY category WITH ROLLUP HAVING AVG(price) IS NOT NULL;
SELECT name, price FROM products WHERE price BETWEEN 50 AND 100 UNION SELECT name, price FROM products WHERE category = 'Clothing';
SELECT * FROM products WHERE category = 'Electronics' AND manufacturer = 'Apple' UNION SELECT * FROM products WHERE category = 'Electronics' AND manufacturer = 'Samsung';
SELECT name, price FROM products WHERE category = 'Electronics' AND manufacturer = 'Apple' UNION ALL SELECT name, price FROM products WHERE category = 'Electronics' AND manufacturer = 'Samsung';
SELECT * FROM products WHERE category = 'Clothing' AND price BETWEEN 50 AND 100 UNION ALL SELECT * FROM products WHERE category = 'Shoes' AND price BETWEEN 50 AND 100;
SELECT * FROM products WHERE category = 'Electronics' AND price > 1000 AND (manufacturer = 'Apple' OR manufacturer = 'Samsung');
SELECT * FROM customers WHERE EXISTS (SELECT * FROM orders WHERE customer_id = customers.id);
SELECT AVG(price) FROM products WHERE category = 'Electronics';
SELECT * FROM products WHERE description LIKE '%organic%';
SELECT * FROM products WHERE price BETWEEN 50 AND 100 AND category = 'Clothing';
SELECT COUNT(*) FROM products WHERE manufacturer = 'Samsung';
SELECT * FROM products WHERE name LIKE '%iPhone%' AND price > 500;
SELECT * FROM products WHERE category IN ('Clothing', 'Shoes') AND price > 100;
SELECT * FROM products WHERE manufacturer = 'Apple' AND price > (SELECT AVG(price) FROM products WHERE manufacturer = 'Apple');
SELECT * FROM products WHERE manufacturer = 'Samsung' AND price > (SELECT AVG(price) FROM products WHERE manufacturer = 'Samsung');
SELECT * FROM products WHERE name LIKE '%bag%' AND NOT category = 'Electronics';
SELECT * FROM products WHERE price = (SELECT MAX(price) FROM products);
SELECT * FROM products WHERE price = (SELECT MIN(price) FROM products WHERE category = 'Clothing');
SELECT * FROM products WHERE category = 'Clothing' ORDER BY price DESC;
SELECT * FROM products WHERE category = 'Electronics' ORDER BY price ASC;
SELECT * FROM products WHERE category = 'Clothing' AND price BETWEEN 50 AND 100 ORDER BY price ASC;
SELECT * FROM products WHERE category = 'Electronics' AND price > 1000 ORDER BY price DESC;
SELECT * FROM products WHERE manufacturer IN ('Apple', 'Samsung') AND price > 500 ORDER BY price ASC;
SELECT COUNT(*) FROM orders;
SELECT * FROM orders WHERE total > 1000;
SELECT * FROM orders WHERE DATE(created_at) = '2022-05-01';
SELECT * FROM orders WHERE customer_id = 1;
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id;
SELECT customer_id, COUNT(*) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id;
SELECT customer_id, SUM(total) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT customer_id, AVG(total) FROM orders GROUP BY customer_id;
SELECT customer_id, AVG(total) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT customer_id, MIN(total) FROM orders GROUP BY customer_id;
SELECT customer_id, MAX(total) FROM orders GROUP BY customer_id;
SELECT customer_id, MAX(total) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id HAVING SUM(total) > 1000;
SELECT customer_id, COUNT() FROM orders GROUP BY customer_id HAVING COUNT() > 1;
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id;
SELECT product_id, COUNT(*) FROM order_items WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY product_id;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
SELECT * FROM customers;
SELECT name, email FROM customers WHERE age > 18;
SELECT * FROM products WHERE price > 100;
SELECT name, category FROM products ORDER BY category;
SELECT COUNT(*) FROM customers;
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products WHERE category = 'Electronics';
SELECT AVG(price) FROM products WHERE category = 'Clothing';
SELECT SUM(price) FROM products WHERE manufacturer = 'Apple';
SELECT * FROM products WHERE description LIKE '%wireless%';
SELECT * FROM customers WHERE state IN ('California', 'New York', 'Texas');
SELECT * FROM products WHERE category = 'Clothing' AND price BETWEEN 50 AND 100;
SELECT * FROM customers WHERE age BETWEEN 18 AND 30;
SELECT * FROM orders WHERE total > 100;
SELECT * FROM products WHERE category = 'Electronics' ORDER BY price DESC;
SELECT * FROM products WHERE category = 'Clothing' ORDER BY price ASC;
SELECT * FROM customers WHERE email LIKE '%gmail.com';
SELECT * FROM products WHERE manufacturer IN ('Apple', 'Samsung') AND price > 500;
SELECT * FROM customers WHERE age >= 21 ORDER BY age ASC;
SELECT * FROM orders WHERE DATE(created_at) = '2022-05-01';
SELECT * FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM orders WHERE customer_id = 1;
SELECT * FROM products WHERE category = 'Electronics' AND manufacturer = 'Apple' OR manufacturer = 'Samsung';
SELECT * FROM products WHERE category IN ('Clothing', 'Shoes') AND price BETWEEN 50 AND 100;
SELECT * FROM products WHERE name LIKE '%shirt%' AND description LIKE '%cotton%';
SELECT * FROM orders WHERE total = (SELECT MAX(total) FROM orders);
SELECT * FROM customers WHERE age = (SELECT MIN(age) FROM customers);
SELECT * FROM products WHERE price = (SELECT AVG(price) FROM products);
SELECT * FROM products WHERE manufacturer = (SELECT manufacturer FROM products GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1);
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE age BETWEEN 18 AND 30);
SELECT COUNT(*) FROM orders WHERE DATE(created_at) = CURDATE();
SELECT * FROM products WHERE price BETWEEN 100 AND 200 AND (category = 'Clothing' OR category = 'Shoes') ORDER BY price ASC;
SELECT * FROM orders WHERE customer_id = 1 AND DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31';
SELECT COUNT(*) FROM products WHERE description LIKE '%organic%';
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id;
SELECT customer_id, COUNT() FROM orders GROUP BY customer_id HAVING COUNT() > 1;
SELECT * FROM products WHERE manufacturer = 'Samsung' AND price > (SELECT AVG(price) FROM products);
SELECT category, COUNT(*) FROM products GROUP BY category;
SELECT customer_id, COUNT() FROM orders GROUP BY customer_id ORDER BY COUNT() DESC LIMIT 5;
SELECT category, MAX(price) FROM products GROUP BY category;
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT * FROM employees WHERE salary > 50000;
SELECT * FROM employees WHERE department = 'Sales' AND salary > 60000;
SELECT * FROM employees WHERE last_name LIKE 'S%';
SELECT * FROM employees WHERE first_name = 'John' OR first_name = 'Jane';
SELECT * FROM employees WHERE hire_date BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM employees ORDER BY last_name ASC;
SELECT * FROM employees ORDER BY salary DESC LIMIT 5;
SELECT COUNT(*) FROM employees WHERE department = 'Marketing';
SELECT AVG(salary) FROM employees WHERE department = 'Finance';
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
SELECT * FROM employees WHERE hire_date < (SELECT MAX(hire_date) FROM employees);
SELECT * FROM employees WHERE department = 'HR' AND hire_date > (SELECT MIN(hire_date) FROM employees);
SELECT * FROM employees WHERE department IN ('Marketing', 'Sales') AND salary > 50000;
SELECT * FROM employees WHERE salary BETWEEN 50000 AND 70000 AND department = 'Engineering';
SELECT * FROM employees WHERE first_name REGEXP '^[A-M]';
SELECT * FROM employees WHERE last_name REGEXP '^[N-Z]';
SELECT * FROM employees WHERE email LIKE '%@gmail.com';
SELECT * FROM employees WHERE phone LIKE '4%';
SELECT * FROM employees WHERE salary > 60000 ORDER BY department ASC, last_name ASC;
SELECT * FROM employees WHERE hire_date BETWEEN '2022-01-01' AND '2022-12-31' AND department = 'Marketing' ORDER BY last_name ASC;
SELECT COUNT(*) FROM employees WHERE salary > 80000 AND department = 'Sales';
SELECT department, COUNT() FROM employees GROUP BY department HAVING COUNT() > 3;
SELECT department, SUM(salary) FROM employees GROUP BY department;
SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 60000;
SELECT * FROM employees WHERE department = 'Finance' ORDER BY salary DESC LIMIT 1;
SELECT department, COUNT(*) FROM employees WHERE salary > 50000 GROUP BY department;
SELECT COUNT(DISTINCT department) FROM employees;
SELECT * FROM employees WHERE last_name IN (SELECT last_name FROM employees GROUP BY last_name HAVING COUNT(*) > 1);
SELECT * FROM employees WHERE salary = (SELECT MAX(salary) FROM employees WHERE department = 'Sales');
SELECT * FROM employees WHERE salary = (SELECT MIN(salary) FROM employees WHERE department = 'Marketing');
SELECT AVG(salary), department FROM employees GROUP BY department HAVING AVG(salary) > 65000;
SELECT department, MAX(salary) FROM employees GROUP BY department;
SELECT department, MIN(salary) FROM employees GROUP BY department HAVING COUNT(*) > 2;
SELECT * FROM employees WHERE hire_date > (SELECT AVG(hire_date) FROM employees);
SELECT * FROM employees WHERE salary BETWEEN (SELECT AVG(salary) FROM employees) - 5000 AND (SELECT AVG(salary) FROM employees) + 5000;
SELECT * FROM employees WHERE salary IN (SELECT salary FROM employees GROUP BY salary HAVING COUNT(*) > 1);
SELECT * FROM customers WHERE id = 1;
SELECT * FROM products WHERE id = 1;
SELECT * FROM orders WHERE id = 1;
SELECT * FROM order_items WHERE id = 1;
SELECT * FROM categories WHERE id = 1;
SELECT * FROM manufacturers WHERE id = 1;
SELECT name FROM customers;
SELECT name, email FROM customers WHERE age > 25;
SELECT name, email FROM customers WHERE age BETWEEN 18 AND 25;
SELECT name, email FROM customers WHERE age IN (18, 21, 25);
SELECT name, email FROM customers WHERE age NOT IN (18, 21, 25);
SELECT * FROM customers WHERE name LIKE 'J%';
SELECT * FROM customers WHERE email LIKE '%gmail.com';
SELECT * FROM customers WHERE phone REGEXP '[0-9]{3}-[0-9]{3}-[0-9]{4}';
SELECT * FROM customers ORDER BY name ASC;
SELECT * FROM customers ORDER BY age DESC;
SELECT * FROM products WHERE category = 'Clothing';
SELECT * FROM products WHERE category = 'Electronics' AND manufacturer = 'Apple';
SELECT * FROM products WHERE category = 'Electronics' OR category = 'Clothing';
SELECT * FROM products WHERE price > 100;
SELECT * FROM products WHERE price BETWEEN 50 AND 100;
SELECT * FROM products WHERE name LIKE '%shirt%' AND category = 'Clothing';
SELECT * FROM products WHERE description LIKE '%cotton%';
SELECT * FROM products WHERE manufacturer IN ('Apple', 'Samsung');
SELECT * FROM orders WHERE customer_id = 1;
SELECT * FROM orders WHERE created_at >= '2022-01-01' AND created_at < '2023-01-01';
SELECT * FROM orders WHERE total > 1000;
SELECT * FROM order_items WHERE order_id = 1;
SELECT * FROM categories WHERE name = 'Clothing';
SELECT * FROM manufacturers WHERE name LIKE '%Samsung%';
SELECT AVG(price) FROM products;
SELECT AVG(price) FROM products WHERE category = 'Electronics';
SELECT SUM(quantity) FROM order_items WHERE product_id = 1;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM products WHERE category = 'Electronics';
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products WHERE category = 'Clothing';
SELECT * FROM customers INNER JOIN orders ON customers.id = orders.customer_id;
SELECT customers.name, orders.total FROM customers INNER JOIN orders ON customers.id = orders.customer_id;
SELECT customers.name, orders.total, order_items.quantity FROM customers INNER JOIN orders ON customers.id = orders.customer_id INNER JOIN order_items ON orders.id = order_items.order_id;
SELECT * FROM customers LEFT JOIN orders ON customers.id = orders.customer_id;
SELECT * FROM customers RIGHT JOIN orders ON customers.id = orders.customer_id;
SELECT category, COUNT(*) FROM products GROUP BY category;
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT * FROM employees WHERE salary > 50000;
SELECT first_name, last_name FROM employees WHERE department = 'Sales';
SELECT COUNT(*) FROM employees WHERE salary > 50000;
SELECT AVG(salary) FROM employees WHERE department = 'Marketing';
SELECT MIN(salary) FROM employees WHERE department = 'Finance';
SELECT MAX(salary) FROM employees WHERE department = 'IT';
SELECT * FROM employees ORDER BY last_name ASC;
SELECT * FROM employees ORDER BY salary DESC;
SELECT * FROM employees WHERE hire_date BETWEEN '2005-01-01' AND '2010-12-31';
SELECT * FROM employees WHERE last_name LIKE 'S%';
SELECT * FROM employees WHERE salary NOT BETWEEN 30000 AND 50000;
SELECT * FROM employees WHERE department IN ('Sales', 'Marketing');
SELECT * FROM employees WHERE department NOT IN ('IT', 'Finance');
SELECT * FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);
SELECT * FROM employees WHERE salary = (SELECT MIN(salary) FROM employees WHERE department = 'Sales');
SELECT COUNT(*) FROM employees WHERE hire_date < '2000-01-01';
SELECT first_name, last_name, salary * 1.10 FROM employees;
SELECT * FROM employees WHERE department = 'IT' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'IT');
SELECT first_name, last_name, salary FROM employees WHERE department = 'Sales' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'Sales') ORDER BY salary DESC;
SELECT first_name, last_name, salary FROM employees WHERE department = 'Marketing' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'Marketing') ORDER BY salary DESC LIMIT 5;
SELECT * FROM employees WHERE hire_date >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);
SELECT * FROM employees WHERE salary > 100000 AND (department = 'IT' OR department = 'Finance');
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT department, COUNT(*) FROM employees GROUP BY department;
SELECT department, MAX(salary) FROM employees GROUP BY department;
SELECT department, MIN(salary) FROM employees GROUP BY department;
SELECT department, SUM(salary) FROM employees GROUP BY department;
SELECT department, AVG(salary), COUNT(*) FROM employees GROUP BY department;
SELECT department, AVG(salary), COUNT(*) FROM employees WHERE salary > 50000 GROUP BY department;
SELECT department, AVG(salary), COUNT() FROM employees WHERE salary > 50000 GROUP BY department HAVING COUNT() > 2;
SELECT * FROM employees WHERE department = 'IT' ORDER BY salary DESC LIMIT 10;
SELECT * FROM employees WHERE department = 'Sales' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'Sales') ORDER BY salary DESC LIMIT 10;
SELECT * FROM employees WHERE department = 'Marketing' AND salary > (SELECT AVG(salary) FROM employees WHERE department = 'Marketing') ORDER BY salary DESC LIMIT 10;
SELECT * FROM employees WHERE hire_date BETWEEN '2005-01-01' AND '2010-12-31' ORDER BY salary DESC LIMIT 10;
SELECT * FROM employees WHERE last_name LIKE 'S%' ORDER BY salary DESC LIMIT 10;
SELECT * FROM orders;
SELECT * FROM order_items;
SELECT name FROM customers;
SELECT name, email FROM customers;
SELECT * FROM customers WHERE email = 'john.doe@example.com';
SELECT * FROM products WHERE price > 100;
SELECT * FROM orders WHERE total > 500;
SELECT * FROM order_items WHERE quantity > 2;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM products;
SELECT COUNT(*) FROM orders;
SELECT COUNT(*) FROM order_items;
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products;
SELECT AVG(price) FROM products;
SELECT SUM(quantity) FROM order_items;
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
SELECT category, COUNT(*) FROM products GROUP BY category;
SELECT manufacturer, AVG(price) FROM products GROUP BY manufacturer;
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id;
SELECT product_id, MAX(price) FROM products GROUP BY product_id;
SELECT * FROM customers WHERE city = 'New York';
SELECT * FROM customers WHERE state = 'California';
SELECT * FROM customers WHERE country = 'Canada';
SELECT * FROM products WHERE category = 'Electronics';
SELECT * FROM products WHERE category = 'Clothing';
SELECT * FROM products WHERE category = 'Shoes';
SELECT * FROM orders WHERE status = 'Pending';
SELECT * FROM orders WHERE status = 'Complete';
SELECT * FROM orders WHERE status = 'Cancelled';
SELECT * FROM order_items WHERE price > 50;
SELECT * FROM order_items WHERE price < 10;
SELECT * FROM customers WHERE name LIKE '%John%';
SELECT * FROM customers WHERE name LIKE '%Doe%';
SELECT * FROM products WHERE description LIKE '%leather%';
SELECT * FROM products WHERE description LIKE '%cotton%';
SELECT * FROM orders WHERE DATE(created_at) = '2022-05-01';
SELECT * FROM orders WHERE MONTH(created_at) = 5 AND YEAR(created_at) = 2022;
SELECT * FROM orders WHERE YEAR(created_at) = 2022;
SELECT * FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM customers ORDER BY name ASC;
SELECT * FROM customers ORDER BY name DESC;
SELECT * FROM products ORDER BY price ASC;
SELECT * FROM products ORDER BY price DESC;
SELECT * FROM orders ORDER BY created_at ASC;
SELECT * FROM orders ORDER BY created_at DESC;
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT * FROM products WHERE category = 'Clothing' AND price BETWEEN 50 AND 100;
SELECT * FROM products WHERE description LIKE '%cotton%' OR description LIKE '%linen%';
SELECT * FROM products ORDER BY price DESC LIMIT 10;
SELECT * FROM products ORDER BY price ASC LIMIT 10;
SELECT * FROM products WHERE NOT category = 'Electronics';
SELECT * FROM products WHERE manufacturer = 'Samsung' AND (category = 'Phones' OR category = 'Tablets');
SELECT * FROM customers;
SELECT name, email FROM customers;
SELECT * FROM orders;
SELECT product_id, quantity FROM order_items;
SELECT * FROM products WHERE category = 'Books';
SELECT * FROM customers WHERE state = 'CA';
SELECT * FROM orders WHERE total > 1000;
SELECT name, price FROM products ORDER BY price DESC;
SELECT AVG(price) FROM products WHERE category = 'Electronics';
SELECT COUNT(*) FROM customers WHERE state = 'NY';
SELECT MAX(price) FROM products WHERE category = 'Clothing';
SELECT MIN(price) FROM products WHERE category = 'Shoes';
SELECT * FROM products WHERE manufacturer = 'Nike';
SELECT name, price FROM products WHERE category = 'Electronics' AND price > 500;
SELECT * FROM customers WHERE email LIKE '%gmail.com';
SELECT COUNT(*) FROM orders WHERE customer_id = 1;
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id;
SELECT * FROM products WHERE price BETWEEN 50 AND 100;
SELECT * FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE name LIKE '%iPhone%';
SELECT name, price FROM products WHERE manufacturer IN ('Apple', 'Samsung');
SELECT * FROM customers WHERE state IN ('CA', 'NY', 'TX');
SELECT name, price FROM products WHERE category = 'Clothing' OR category = 'Shoes';
SELECT * FROM orders WHERE customer_id = 1 ORDER BY created_at DESC;
SELECT * FROM products WHERE price = (SELECT MAX(price) FROM products);
SELECT * FROM products WHERE price = (SELECT MIN(price) FROM products);
SELECT * FROM customers WHERE created_at >= '2022-01-01' AND created_at <= '2022-12-31';
SELECT category, AVG(price) FROM products GROUP BY category;
SELECT COUNT(DISTINCT manufacturer) FROM products;
SELECT name, price, category FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT customer_id, COUNT() FROM orders GROUP BY customer_id HAVING COUNT() > 5;
SELECT customer_id, COUNT() FROM orders GROUP BY customer_id ORDER BY COUNT() DESC LIMIT 10;
SELECT * FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE state = 'CA');
SELECT * FROM customers WHERE id NOT IN (SELECT customer_id FROM orders);
SELECT COUNT(*) FROM orders WHERE DATE(created_at) = '2022-05-01';
SELECT * FROM customers WHERE name LIKE '%Smith%' OR name LIKE '%Johnson%';
SELECT name, price FROM products WHERE manufacturer = 'Apple' OR manufacturer = 'Samsung';
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id HAVING SUM(total) > 1000;
SELECT name, price FROM products WHERE category = 'Electronics' ORDER BY price DESC LIMIT 5;
SELECT customer_id, COUNT() FROM orders GROUP BY customer_id HAVING COUNT() >= 2 AND COUNT(*) <= 5;
SELECT COUNT(*) FROM products WHERE category = 'Clothing';
SELECT name, price FROM products WHERE category = 'Clothing' ORDER BY price ASC LIMIT 5;
SELECT * FROM orders WHERE customer_id = 1 AND created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM products;
SELECT * FROM order_items;
SELECT * FROM categories;
SELECT * FROM manufacturers;
SELECT name, email FROM customers;
SELECT * FROM orders WHERE status = 'completed';
SELECT * FROM orders WHERE status = 'pending';
SELECT * FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE category = 'Electronics';
SELECT * FROM products WHERE category = 'Clothing';
SELECT * FROM products WHERE price > 500;
SELECT * FROM products WHERE price < 100;
SELECT * FROM products WHERE price BETWEEN 100 AND 500;
SELECT * FROM products WHERE name LIKE '%Samsung%';
SELECT * FROM products WHERE description LIKE '%smartphone%';
SELECT * FROM products WHERE manufacturer = 'Samsung';
SELECT * FROM products WHERE manufacturer = 'Apple';
SELECT * FROM products WHERE manufacturer = 'Sony';
SELECT * FROM order_items WHERE order_id = 1;
SELECT * FROM order_items WHERE quantity > 2;
SELECT * FROM order_items WHERE price < 100;
SELECT * FROM order_items WHERE price > 500;
SELECT * FROM order_items WHERE product_id = 1;
SELECT * FROM categories WHERE name = 'Electronics';
SELECT * FROM categories WHERE name = 'Clothing';
SELECT * FROM manufacturers WHERE name = 'Samsung';
SELECT * FROM manufacturers WHERE name = 'Apple';
SELECT * FROM manufacturers WHERE name = 'Sony';
SELECT AVG(price) FROM products;
SELECT SUM(price) FROM products;
SELECT COUNT(*) FROM products;
SELECT MIN(price) FROM products;
SELECT MAX(price) FROM products;
SELECT AVG(price) FROM products WHERE category = 'Electronics';
SELECT SUM(price) FROM products WHERE category = 'Electronics';
SELECT COUNT(*) FROM products WHERE category = 'Electronics';
SELECT MIN(price) FROM products WHERE category = 'Electronics';
SELECT MAX(price) FROM products WHERE category = 'Electronics';
SELECT AVG(price) FROM products WHERE manufacturer = 'Samsung';
SELECT SUM(price) FROM products WHERE manufacturer = 'Samsung';
SELECT COUNT(*) FROM products WHERE manufacturer = 'Samsung';
SELECT MIN(price) FROM products WHERE manufacturer = 'Samsung';
SELECT MAX(price) FROM products WHERE manufacturer = 'Samsung';
SELECT AVG(quantity) FROM order_items;
SELECT SUM(quantity) FROM order_items;
SELECT COUNT(*) FROM order_items;
SELECT MIN(quantity) FROM order_items;
SELECT MAX(quantity) FROM order_items;
SELECT AVG(quantity) FROM order_items WHERE product_id = 1;
SELECT SUM(quantity) FROM order_items WHERE product_id = 1;
SELECT COUNT(*) FROM order_items WHERE product_id = 1;
SELECT MIN(quantity) FROM order_items WHERE product_id = 1;
SELECT MAX(quantity) FROM order_items WHERE product_id = 1;
SELECT AVG(total) FROM orders;
SELECT SUM(total) FROM orders;
SELECT COUNT(*) FROM orders;
SELECT MIN(total) FROM orders;
SELECT MAX(total) FROM orders;
SELECT AVG(total) FROM orders WHERE customer_id = 1;
SELECT SUM(total) FROM orders WHERE customer_id = 1;
SELECT * FROM customers;
SELECT * FROM products;
SELECT * FROM orders;
SELECT * FROM order_items;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM products;
SELECT COUNT(*) FROM orders;
SELECT COUNT(*) FROM order_items;
SELECT * FROM customers WHERE id = 1;
SELECT * FROM products WHERE id = 1;
SELECT * FROM orders WHERE id = 1;
SELECT * FROM order_items WHERE id = 1;
SELECT * FROM customers WHERE name LIKE 'John%';
SELECT * FROM products WHERE price > 100;
SELECT * FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM order_items WHERE quantity > 10;
SELECT * FROM customers WHERE city = 'New York';
SELECT * FROM products WHERE category = 'Electronics';
SELECT * FROM orders WHERE customer_id = 1;
SELECT * FROM order_items WHERE order_id = 1;
SELECT name, email FROM customers;
SELECT name, price FROM products;
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id;
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id;
SELECT category, COUNT(*) FROM products GROUP BY category;
SELECT customer_id, COUNT(*) FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
SELECT category, AVG(price) FROM products GROUP BY category;
SELECT customer_id, AVG(total) FROM orders GROUP BY customer_id;
SELECT product_id, MAX(price) FROM products GROUP BY product_id;
SELECT customer_id, MAX(total) FROM orders GROUP BY customer_id;
SELECT product_id, MIN(price) FROM products GROUP BY product_id;
SELECT customer_id, MIN(total) FROM orders GROUP BY customer_id;
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id;
SELECT product_id, AVG(price) FROM products GROUP BY product_id;
SELECT customer_id, AVG(total) FROM orders GROUP BY customer_id;
SELECT customer_id, MAX(total) FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT category, MAX(price) FROM products GROUP BY category;
SELECT customer_id, MIN(total) FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT product_id, MIN(price) FROM products WHERE category = 'Electronics' GROUP BY product_id;
SELECT customer_id, SUM(total) FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT category, AVG(price) FROM products WHERE manufacturer = 'Apple' GROUP BY category;
SELECT customer_id, AVG(total) FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31' AND status = 'completed' GROUP BY customer_id;
SELECT product_id, COUNT(*) FROM order_items WHERE quantity > 10 GROUP BY product_id;
SELECT customer_id, COUNT(*) FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31' AND status = 'completed';
SELECT * FROM products;
SELECT * FROM order_items;
SELECT * FROM manufacturers;
SELECT * FROM customers WHERE age > 30;
SELECT * FROM customers WHERE city = 'New York';
SELECT * FROM orders WHERE total > 100;
SELECT * FROM products WHERE price BETWEEN 10 AND 50;
SELECT * FROM order_items WHERE quantity > 5;
SELECT * FROM manufacturers WHERE country = 'Japan';
SELECT name, email FROM customers;
SELECT name, age FROM customers WHERE city = 'Los Angeles';
SELECT name, address FROM customers WHERE age > 40;
SELECT name, city FROM customers WHERE state = 'California';
SELECT name, total FROM orders WHERE DATE(created_at) = '2022-05-01';
SELECT name, total FROM orders WHERE MONTH(created_at) = 5 AND YEAR(created_at) = 2022;
SELECT name, total FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31';
SELECT name, total FROM orders WHERE total > (SELECT AVG(total) FROM orders);
SELECT name, total FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE city = 'New York');
SELECT name, price FROM products WHERE category = 'Electronics';
SELECT name, price FROM products WHERE category = 'Clothing';
SELECT name, price FROM products WHERE category = 'Shoes';
SELECT name, price FROM products WHERE manufacturer = 'Apple';
SELECT name, price FROM products WHERE manufacturer = 'Samsung';
SELECT name, price FROM products WHERE manufacturer = 'Sony';
SELECT name, price FROM products WHERE description LIKE '%waterproof%';
SELECT name, price FROM products WHERE description LIKE '%wireless%';
SELECT name, price FROM products WHERE description LIKE '%noise-canceling%';
SELECT name, price FROM products WHERE description LIKE '%bluetooth%';
SELECT name, price FROM products WHERE description LIKE '%organic%';
SELECT name, price FROM products WHERE description LIKE '%vegan%';
SELECT name, price FROM products WHERE description LIKE '%gluten-free%';
SELECT name, price FROM products WHERE description LIKE '%sustainable%';
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM orders;
SELECT COUNT(*) FROM products;
SELECT COUNT(*) FROM order_items;
SELECT COUNT(*) FROM manufacturers;
SELECT AVG(age) FROM customers;
SELECT AVG(total) FROM orders;
SELECT AVG(price) FROM products;
SELECT AVG(quantity) FROM order_items;
SELECT SUM(total) FROM orders;
SELECT SUM(price) FROM products;
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products;
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id;
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id;
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT * FROM products WHERE category = 'Clothing' AND price BETWEEN 50 AND 100;
SELECT * FROM products WHERE description LIKE '%cotton%' OR description LIKE '%linen%';
SELECT * FROM products ORDER BY price DESC LIMIT 10;
SELECT * FROM products ORDER BY price ASC LIMIT 10;
SELECT * FROM users;
SELECT * FROM users WHERE age > 30;
SELECT * FROM users WHERE email LIKE '%gmail.com';
SELECT * FROM users WHERE age BETWEEN 25 AND 35;
SELECT * FROM users ORDER BY name;
SELECT * FROM users ORDER BY age DESC;
SELECT * FROM users WHERE age = (SELECT MAX(age) FROM users);
SELECT * FROM users WHERE age = (SELECT MIN(age) FROM users);
SELECT COUNT(*) FROM users WHERE age > 30;
SELECT AVG(age) FROM users;
SELECT SUM(age) FROM users;
SELECT * FROM users WHERE name = 'John';
SELECT * FROM users WHERE name LIKE '%John%';
SELECT * FROM users WHERE name = 'John' AND age = 25;
SELECT * FROM users WHERE name = 'John' OR age = 25;
SELECT * FROM users WHERE age IN (25, 30, 35);
SELECT * FROM users WHERE age NOT IN (25, 30, 35);
SELECT * FROM users WHERE age IS NULL;
SELECT * FROM users WHERE age IS NOT NULL;
SELECT * FROM users WHERE name = 'John' LIMIT 1;
SELECT * FROM users WHERE age > 30 LIMIT 10;
SELECT * FROM users WHERE age > 30 OFFSET 10;
SELECT * FROM users WHERE age > 30 LIMIT 10 OFFSET 10;
SELECT * FROM users WHERE age > 30 ORDER BY name DESC LIMIT 10 OFFSET 10;
SELECT * FROM users WHERE age > 30 ORDER BY name DESC, age ASC;
SELECT COUNT(*) FROM users;
SELECT COUNT(*) FROM users WHERE age > 30;
SELECT SUM(age) FROM users WHERE age > 30;
SELECT AVG(age) FROM users WHERE age > 30;
SELECT MIN(age) FROM users;
SELECT MAX(age) FROM users;
SELECT * FROM users WHERE id = 1;
SELECT * FROM users WHERE id IN (1, 2, 3);
SELECT * FROM users WHERE id NOT IN (1, 2, 3);
SELECT * FROM users WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM users WHERE created_at >= '2022-01-01' AND created_at <= '2022-12-31';
SELECT * FROM users WHERE email LIKE '%@gmail.com' AND created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM users WHERE age > 30 AND created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM users WHERE age > 30 AND email LIKE '%@gmail.com' AND created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM users WHERE age > 30 AND email LIKE '%@gmail.com' OR created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM users WHERE age > 30 OR (email LIKE '%@gmail.com' AND created_at BETWEEN '2022-01-01' AND '2022-12-31');
SELECT * FROM employees;
SELECT * FROM employees WHERE department = 'Sales';
SELECT first_name, last_name, salary FROM employees WHERE salary > 50000;
SELECT COUNT(*) FROM employees;
SELECT AVG(salary) FROM employees;
SELECT * FROM employees ORDER BY last_name;
SELECT * FROM employees ORDER BY salary DESC LIMIT 10;
SELECT * FROM employees WHERE hire_date BETWEEN '2010-01-01' AND '2015-12-31';
SELECT * FROM employees WHERE department IN ('Sales', 'Marketing');
SELECT * FROM employees WHERE last_name LIKE '%son';
SELECT * FROM employees WHERE first_name LIKE 'J%';
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
SELECT * FROM employees WHERE hire_date = '2015-01-01' OR hire_date = '2016-01-01';
SELECT department, AVG(salary) FROM employees GROUP BY department;
SELECT department, COUNT() FROM employees GROUP BY department HAVING COUNT() > 5;
SELECT * FROM employees WHERE salary > 50000 AND department = 'Sales';
SELECT department, SUM(salary) FROM employees GROUP BY department;
SELECT * FROM employees WHERE department = 'IT' AND (title = 'Programmer' OR title = 'Analyst');
SELECT * FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);
SELECT * FROM employees WHERE salary = (SELECT MIN(salary) FROM employees);
SELECT * FROM employees WHERE salary BETWEEN 50000 AND 70000;
SELECT * FROM employees WHERE department = 'Marketing' AND title LIKE '%Manager%';
SELECT * FROM employees WHERE department = 'Sales' AND hire_date BETWEEN '2010-01-01' AND '2015-12-31' ORDER BY last_name ASC, first_name ASC;
SELECT * FROM employees WHERE title LIKE '%Director%';
SELECT department, MAX(salary) FROM employees GROUP BY department;
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees WHERE department = 'Sales');
SELECT department, AVG(salary) FROM employees GROUP BY department ORDER BY AVG(salary) DESC LIMIT 3;
SELECT * FROM employees WHERE salary IN (SELECT salary FROM employees GROUP BY salary HAVING COUNT(*) > 1);
SELECT * FROM employees WHERE department = 'IT' AND (hire_date >= '2010-01-01' AND hire_date <= '2015-12-31');
SELECT * FROM employees WHERE last_name LIKE '%Smith%' AND department IN ('Sales', 'Marketing');
SELECT * FROM employees WHERE salary > 50000 AND department = 'IT' AND title NOT LIKE '%Manager%';
SELECT department, COUNT(*) FROM employees WHERE salary > 50000 GROUP BY department;
SELECT * FROM employees WHERE department = 'Sales' OR department = 'Marketing';
SELECT * FROM employees WHERE title LIKE '%Engineer%';
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees WHERE department = 'IT');
SELECT * FROM employees WHERE salary NOT BETWEEN 30000 AND 50000;
SELECT * FROM employees WHERE hire_date < '2010-01-01' OR hire_date > '2015-12-31';
SELECT * FROM employees WHERE title LIKE '%Analyst%' AND (department = 'IT' OR department = 'Finance');
SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM products;
SELECT name, email FROM customers;
SELECT * FROM customers WHERE age > 25;
SELECT * FROM orders WHERE total > 100;
SELECT * FROM products WHERE category = 'Electronics';
SELECT * FROM customers WHERE name LIKE 'J%';
SELECT * FROM products WHERE price BETWEEN 50 AND 100;
SELECT * FROM orders WHERE status = 'Complete';
SELECT * FROM customers WHERE email LIKE '%gmail.com';
SELECT * FROM products WHERE name LIKE '%phone%';
SELECT * FROM orders WHERE created_at > '2022-01-01';
SELECT * FROM customers WHERE state IN ('CA', 'NY', 'TX');
SELECT * FROM products WHERE manufacturer IN ('Apple', 'Samsung', 'Microsoft');
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM orders WHERE status = 'Pending';
SELECT COUNT(*) FROM products WHERE price > 1000;
SELECT AVG(price) FROM products;
SELECT AVG(age) FROM customers;
SELECT SUM(total) FROM orders WHERE status = 'Complete';
SELECT MAX(price) FROM products;
SELECT MIN(price) FROM products;
SELECT * FROM customers ORDER BY age DESC;
SELECT * FROM orders ORDER BY created_at ASC;
SELECT * FROM products ORDER BY price DESC;
SELECT * FROM customers LIMIT 10;
SELECT * FROM orders LIMIT 20;
SELECT * FROM products LIMIT 50;
SELECT * FROM customers WHERE age > 30 ORDER BY name ASC LIMIT 10;
SELECT * FROM orders WHERE status = 'Complete' ORDER BY total DESC LIMIT 20;
SELECT * FROM products WHERE price BETWEEN 50 AND 100 ORDER BY manufacturer ASC LIMIT 50;
SELECT * FROM customers WHERE age > 25 AND state = 'CA';
SELECT * FROM orders WHERE total > 100 AND status = 'Pending';
SELECT * FROM products WHERE manufacturer = 'Apple' OR manufacturer = 'Samsung';
SELECT * FROM customers WHERE name LIKE '%John%' OR email LIKE '%john%';
SELECT * FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE category = 'Clothing' AND price < 50;
SELECT * FROM customers WHERE age >= 18 AND age <= 30;
SELECT * FROM orders WHERE status = 'Complete' AND created_at > '2022-05-01';
SELECT * FROM products WHERE description LIKE '%organic%' OR description LIKE '%natural%';
SELECT * FROM customers WHERE state != 'NY';
SELECT * FROM orders WHERE total > (SELECT AVG(total) FROM orders);
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products WHERE category = 'Electronics');
SELECT * FROM customers WHERE age > (SELECT AVG(age) FROM customers WHERE state = 'CA');
SELECT * FROM orders WHERE customer_id = 1;
SELECT * FROM order_items WHERE order_id = 1;
SELECT * FROM products WHERE id IN (SELECT product_id FROM order_items WHERE order_id = 1);
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id;
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT * FROM customers;
SELECT name, email FROM customers;
SELECT * FROM products WHERE category = 'Electronics';
SELECT name, price FROM products WHERE category = 'Clothing';
SELECT * FROM orders WHERE customer_id = 1;
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id;
SELECT customer_id, COUNT(*) FROM orders WHERE DATE(created_at) = '2022-05-01' GROUP BY customer_id;
SELECT customer_id, COUNT(*) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id;
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id;
SELECT customer_id, AVG(total) FROM orders GROUP BY customer_id;
SELECT category, COUNT(*) FROM products GROUP BY category;
SELECT category, AVG(price) FROM products GROUP BY category;
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT category, MAX(price) FROM products GROUP BY category;
SELECT manufacturer, COUNT(*) FROM products GROUP BY manufacturer;
SELECT manufacturer, AVG(price) FROM products GROUP BY manufacturer;
SELECT manufacturer, MIN(price) FROM products GROUP BY manufacturer;
SELECT manufacturer, MAX(price) FROM products GROUP BY manufacturer;
SELECT COUNT(*) FROM products WHERE category = 'Electronics';
SELECT AVG(price) FROM products WHERE category = 'Clothing';
SELECT MAX(price) FROM products WHERE category = 'Shoes';
SELECT MIN(price) FROM products WHERE category = 'Accessories';
SELECT COUNT(*) FROM orders WHERE DATE(created_at) = '2022-05-01';
SELECT AVG(total) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31';
SELECT MAX(total) FROM orders WHERE customer_id = 1;
SELECT MIN(total) FROM orders WHERE customer_id = 2;
SELECT customer_id, COUNT(*) FROM order_items GROUP BY customer_id;
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id;
SELECT customer_id, product_id, COUNT(*) FROM order_items GROUP BY customer_id, product_id;
SELECT customer_id, SUM(quantity) FROM order_items GROUP BY customer_id;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id;
SELECT customer_id, product_id, SUM(quantity) FROM order_items GROUP BY customer_id, product_id;
SELECT customer_id, AVG(total) FROM orders GROUP BY customer_id HAVING AVG(total) > 100;
SELECT category, AVG(price) FROM products GROUP BY category HAVING AVG(price) > 50;
SELECT manufacturer, AVG(price) FROM products GROUP BY manufacturer HAVING AVG(price) < 500;
SELECT * FROM products WHERE price > 100 ORDER BY price DESC;
SELECT * FROM products WHERE price < 50 ORDER BY price ASC;
SELECT * FROM products WHERE category = 'Electronics' ORDER BY name ASC;
SELECT * FROM products WHERE category = 'Clothing' ORDER BY name DESC;
SELECT * FROM orders WHERE customer_id = 1 ORDER BY created_at DESC;
SELECT * FROM orders WHERE customer_id = 2 ORDER BY created_at ASC;
SELECT * FROM order_items WHERE customer_id = 1 ORDER BY created_at DESC;
SELECT * FROM order_items WHERE customer_id = 2 ORDER BY created_at ASC;
SELECT * FROM users;
SELECT name, email FROM users;
SELECT * FROM users WHERE age > 18;
SELECT * FROM users WHERE age BETWEEN 18 AND 30;
SELECT * FROM users WHERE name LIKE '%John%';
SELECT * FROM users WHERE email LIKE '%gmail.com%';
SELECT * FROM users WHERE name = 'John' AND age = 25;
SELECT * FROM users WHERE age > 18 ORDER BY name ASC;
SELECT * FROM users WHERE age > 18 ORDER BY name DESC;
SELECT * FROM users LIMIT 10;
SELECT * FROM users WHERE age > 18 LIMIT 10;
SELECT COUNT(*) FROM users;
SELECT COUNT(*) FROM users WHERE age > 18;
SELECT AVG(age) FROM users;
SELECT MAX(age) FROM users;
SELECT MIN(age) FROM users;
SELECT SUM(age) FROM users;
SELECT * FROM users WHERE age = (SELECT MAX(age) FROM users);
SELECT * FROM users WHERE age = (SELECT MIN(age) FROM users);
SELECT * FROM users WHERE age IN (20, 25, 30);
SELECT * FROM users WHERE age NOT IN (20, 25, 30);
SELECT * FROM users WHERE id BETWEEN 10 AND 20;
SELECT * FROM users WHERE id NOT BETWEEN 10 AND 20;
SELECT * FROM users WHERE name <> 'John';
SELECT * FROM users WHERE name != 'John';
SELECT * FROM users WHERE name = 'John' OR name = 'Jane';
SELECT * FROM users WHERE name IN ('John', 'Jane');
SELECT * FROM users WHERE name NOT IN ('John', 'Jane');
SELECT * FROM users WHERE email IS NULL;
SELECT * FROM users WHERE email IS NOT NULL;
SELECT * FROM users WHERE age IS NULL;
SELECT * FROM users WHERE age IS NOT NULL;
SELECT * FROM users WHERE name = 'John' UNION SELECT * FROM users WHERE name = 'Jane';
SELECT * FROM users WHERE name = 'John' UNION ALL SELECT * FROM users WHERE name = 'Jane';
SELECT * FROM users WHERE age = (SELECT AVG(age) FROM users);
SELECT * FROM users WHERE age = (SELECT MAX(age) FROM users WHERE name = 'John');
SELECT * FROM users WHERE age = (SELECT MIN(age) FROM users WHERE name = 'John');
SELECT * FROM users WHERE age > (SELECT AVG(age) FROM users);
SELECT * FROM users WHERE age > (SELECT AVG(age) FROM users WHERE name = 'John');
SELECT * FROM users WHERE age > (SELECT AVG(age) FROM users WHERE name = 'John' OR name = 'Jane');
SELECT * FROM users WHERE age = (SELECT MAX(age) FROM users WHERE name LIKE '%John%');
SELECT * FROM users WHERE age = (SELECT MAX(age) FROM users WHERE name LIKE '%John%' AND email LIKE '%gmail.com%');
SELECT * FROM users WHERE age = (SELECT MIN(age) FROM users WHERE name LIKE '%John%' AND email LIKE '%gmail.com%');
SELECT * FROM users WHERE age > (SELECT AVG(age) FROM users WHERE id BETWEEN 1 AND 10);
SELECT * FROM users WHERE age > (SELECT AVG(age) FROM users WHERE id NOT BETWEEN 1 AND 10);
SELECT * FROM manufacturers;
SELECT * FROM categories;
SELECT * FROM customers WHERE id = 1;
SELECT * FROM products WHERE id = 1;
SELECT * FROM orders WHERE id = 1;
SELECT * FROM order_items WHERE order_id = 1;
SELECT * FROM manufacturers WHERE id = 1;
SELECT * FROM categories WHERE id = 1;
SELECT * FROM customers WHERE email = 'john@example.com';
SELECT * FROM products WHERE name LIKE '%shirt%';
SELECT * FROM orders WHERE total > 100;
SELECT * FROM order_items WHERE quantity >= 5;
SELECT * FROM manufacturers WHERE name = 'Nike';
SELECT * FROM categories WHERE name = 'Electronics';
SELECT id, name, email FROM customers;
SELECT id, name, price FROM products;
SELECT id, total, created_at FROM orders;
SELECT order_id, product_id, quantity FROM order_items;
SELECT id, name, country FROM manufacturers;
SELECT id, name, description FROM categories;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM products;
SELECT COUNT(*) FROM orders;
SELECT COUNT(*) FROM order_items;
SELECT COUNT(*) FROM manufacturers;
SELECT COUNT(*) FROM categories;
SELECT AVG(total) FROM orders;
SELECT MAX(price) FROM products;
SELECT MIN(quantity) FROM order_items;
SELECT SUM(total) FROM orders;
SELECT SUM(quantity) FROM order_items;
SELECT DISTINCT country FROM manufacturers;
SELECT DISTINCT category FROM products;
SELECT * FROM customers ORDER BY name ASC;
SELECT * FROM products ORDER BY price DESC;
SELECT * FROM orders ORDER BY created_at DESC;
SELECT * FROM order_items ORDER BY quantity ASC;
SELECT * FROM manufacturers ORDER BY name ASC;
SELECT * FROM categories ORDER BY name ASC;
SELECT * FROM customers WHERE country = 'USA';
SELECT * FROM products WHERE price BETWEEN 50 AND 100;
SELECT * FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM order_items WHERE quantity IN (1, 5, 10);
SELECT * FROM manufacturers WHERE country NOT IN ('USA', 'China');
SELECT * FROM categories WHERE name LIKE '%tech%';
SELECT category, MIN(price) FROM products GROUP BY category;
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT * FROM products WHERE category = 'Clothing' AND price BETWEEN 50 AND 100;
SELECT * FROM products WHERE description LIKE '%cotton%' OR description LIKE '%linen%';
SELECT * FROM products ORDER BY price DESC LIMIT 10;
SELECT * FROM products ORDER BY price ASC LIMIT 10;
SELECT * FROM products WHERE NOT category = 'Electronics';
SELECT * FROM products WHERE manufacturer = 'Samsung' AND (category = 'Phones' OR category = 'Tablets');
SELECT * FROM products WHERE NOT manufacturer IN ('Apple', 'Samsung');
SELECT * FROM products WHERE name REGEXP '[0-9]';
SELECT * FROM products WHERE LENGTH(description) > 100;
SELECT * FROM products WHERE YEAR(created_at) = 2022;
SELECT * FROM products WHERE price BETWEEN 100 AND 200;
SELECT * FROM products WHERE name LIKE 'A%';
SELECT * FROM products WHERE name LIKE '%X%';
SELECT * FROM products WHERE category = 'Books' AND price < 50;
SELECT * FROM products WHERE category = 'Electronics' AND price > 500;
SELECT * FROM products WHERE manufacturer IN ('Apple', 'Samsung');
SELECT * FROM products WHERE manufacturer NOT IN ('Apple', 'Samsung');
SELECT * FROM products WHERE description LIKE '%waterproof%';
SELECT * FROM products ORDER BY price DESC;
SELECT * FROM products ORDER BY created_at ASC;
SELECT * FROM products WHERE category = 'Clothing' ORDER BY price DESC;
SELECT COUNT(*) FROM products WHERE category = 'Electronics';
SELECT AVG(price) FROM products WHERE category = 'Clothing';
SELECT SUM(price) FROM products WHERE category = 'Books';
SELECT MAX(price) FROM products WHERE category = 'Electronics';
SELECT MIN(price) FROM products WHERE category = 'Clothing';
SELECT COUNT(*) FROM customers;
SELECT AVG(age) FROM customers;
SELECT MAX(age) FROM customers;
SELECT MIN(age) FROM customers;
SELECT * FROM orders WHERE customer_id = 1;
SELECT * FROM orders WHERE created_at > '2022-01-01';
SELECT * FROM orders WHERE total > 100;
SELECT COUNT(*) FROM order_items WHERE order_id = 1;
SELECT SUM(quantity) FROM order_items WHERE product_id = 1;
SELECT AVG(price) FROM products WHERE category = 'Electronics' AND manufacturer = 'Apple';
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id;
SELECT product_id, COUNT(*) FROM order_items GROUP BY product_id;
SELECT category, AVG(price) FROM products GROUP BY category;
SELECT manufacturer, SUM(price) FROM products GROUP BY manufacturer;
SELECT COUNT(*) FROM orders WHERE DATE(created_at) = '2022-05-01';
SELECT COUNT(*) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31';
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id;
SELECT product_id, SUM(quantity) FROM order_items GROUP BY product_id ORDER BY SUM(quantity) DESC;
SELECT customer_id, SUM(total) FROM orders GROUP BY customer_id HAVING SUM(total) > 1000;
SELECT COUNT(*) FROM products WHERE category = 'Electronics';
SELECT COUNT(*) FROM products WHERE manufacturer = 'Samsung';
SELECT category, COUNT() FROM products GROUP BY category HAVING COUNT() > 5;
SELECT manufacturer, AVG(price) FROM products WHERE category = 'Electronics' GROUP BY manufacturer HAVING AVG(price) > 500;
SELECT category, SUM(price) FROM products WHERE manufacturer = 'Apple' GROUP BY category;
SELECT customer_id, COUNT(*) FROM orders WHERE DATE(created_at) = '2022-05-01' GROUP BY customer_id;
SELECT customer_id, SUM(total) FROM orders WHERE DATE(created_at) BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customer_id HAVING SUM(total) > 1000;
SELECT * FROM customers WHERE city = 'New York';
SELECT * FROM orders WHERE status = 'delivered';
SELECT * FROM products WHERE price > 50;
SELECT * FROM order_items WHERE quantity >= 10;
SELECT * FROM suppliers WHERE country = 'France';
SELECT * FROM categories WHERE name LIKE '%clothing%';
SELECT * FROM employees WHERE birth_date BETWEEN '1980-01-01' AND '1990-01-01';
SELECT * FROM customers ORDER BY last_name ASC, first_name ASC;
SELECT * FROM orders ORDER BY created_at DESC LIMIT 10;
SELECT * FROM products WHERE category_id = 2;
SELECT * FROM order_items WHERE product_id = 5;
SELECT * FROM suppliers WHERE phone LIKE '%555%';
SELECT * FROM categories WHERE id NOT IN (1, 3, 5);
SELECT * FROM employees WHERE title = 'Manager' AND department = 'Sales';
SELECT * FROM customers WHERE email LIKE '%@gmail.com';
SELECT * FROM orders WHERE created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM products WHERE name LIKE '%T-shirt%' OR name LIKE '%shirt%';
SELECT * FROM order_items WHERE quantity >= 10 AND unit_price >= 50;
SELECT * FROM suppliers WHERE country = 'USA' OR country = 'Canada';
SELECT * FROM categories WHERE name NOT LIKE '%electronics%';
SELECT * FROM employees WHERE birth_date < '1980-01-01' AND title = 'Manager';
SELECT * FROM customers WHERE city = 'London' AND country = 'UK';
SELECT * FROM orders WHERE customer_id = 10 AND status = 'pending';
SELECT * FROM products WHERE price BETWEEN 10 AND 20 AND category_id = 3;
SELECT * FROM order_items WHERE product_id = 1 OR product_id = 2;
SELECT * FROM suppliers WHERE phone LIKE '%555%' AND fax LIKE '%555%';
SELECT * FROM categories WHERE name LIKE '%clothing%' AND description LIKE '%cotton%';
SELECT * FROM employees WHERE title = 'Manager' AND department = 'Sales' AND hire_date < '2000-01-01';
SELECT * FROM customers WHERE email LIKE '%@gmail.com' AND created_at BETWEEN '2022-01-01' AND '2022-12-31';
SELECT * FROM orders WHERE created_at >= '2022-01-01' AND created_at <= '2022-12-31' AND (status = 'delivered' OR status = 'completed');
SELECT * FROM products WHERE price >= 100 AND (category_id = 1 OR category_id = 2) AND manufacturer_id = 3;
SELECT * FROM order_items WHERE unit_price >= 50 AND (quantity >= 10 OR discount >= 0.2);
SELECT * FROM suppliers WHERE country IN ('USA', 'Canada', 'Mexico') AND city NOT IN ('New York', 'Los Angeles');
SELECT * FROM categories WHERE name LIKE '%clothing%' OR (description LIKE '%cotton%' AND description LIKE '%linen%');
